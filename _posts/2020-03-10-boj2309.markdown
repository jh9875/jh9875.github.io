---
layout: post
title:  "[Baejoon] 2309번: 일곱 난쟁이"
date:   2020-03-11
categories: PROBLEM_SOLVING
permalink: /archivers/boj2309
tags: [baekjoon , brute_force]
---

## 문제

이 문제는 브루트 포스 유형의 문제로, 모든 경우의 수를 탐색해 가면서 답을 찾는 문제이다.
문제의 입력이 크지 않기 때문에 모든 경우를 탐색하더라도 시간초과가 되지 않는다.


문제 링크 : <https://www.acmicpc.net/problem/2309>   


## 풀이
이 문제를 간단히 요약해 보자면 9명의 난쟁이 중 7명의 난쟁이를 고르는 문제이다.   
문제의 조건은 7명의 난쟁이들의 키의 합이 100이 되어야 한다. 가장 단순하게 생각해 봤을 때 9개 중 7개를 고르는 경우를
모두 탐색해 보고 키의 합이 100이 되었을 때만 출력하면 된다.   
이것을 구현한 코드는 다음과 같다.

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.Stack;

public class Main
{
	static boolean find =false;
	static int[] arr =new int[9];
	static Stack<Integer> ans =new Stack<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		//input data
		for(int i =0; i <9; i++)
			arr[i] =Integer.parseInt(br.readLine());
		Arrays.sort(arr);
		
		pick(-1, 7, 0);
		for(int n : ans)
			bw.write(n +"\n");
		bw.flush();
	}
	
	static void pick(int index, int toPick, int sum)
	{
		if(toPick ==0 && sum ==100)
		{
			find =true;
			return;
		}
		for(int nextIndex =index+1; nextIndex <9; nextIndex++)
		{
			ans.push(arr[nextIndex]);
			pick(nextIndex, toPick-1, sum +arr[nextIndex]);
			if(find)
				return;
			ans.pop();
		}
	}
}
~~~

위 코드를 설명해 보자면, 9명의 난쟁이가 일렬로 서있다고 생각했을 때
pick 함수를 통해 각 난쟁이를 선택하는 경우와 선택하지 않는 경우를 모두 확인해보는 코드이다.

ans.push를 하고 pick함수를 호출하면
해당 난쟁이를 포함한 상태에서 다음에 선택할 난쟁이를 고르는게 된다.

ans.pop을 하고 다음 반복문으로 넘어가면 해당 순서에 있는 난쟁이를 선택하지 않은
상태에서 다음에 선택할 난쟁이를 고르게 된다.

기저사례로 7명을 모두 뽑고, 그 키의 합이 100이 되면
더이상 뽑을 것이 없다는 것을 알리기 위해 find =true로 변경해서 그 이후는 모두 통과하게 한다.

추가로
위 코드에서 pick함수를 호출할 때 index를 -1부터 사용한 이유는 함수의 내용이
전에 뽑은 인덱스를 기준으로 다음 인덱스부터 뽑기 때문이다.
그러므로 -1번째 이후 0번째부터 뽑을지 말지 결정하는게 된다.
그리고 stack을 사용한 이유는 가장 최근에 선택한 난쟁이를 넣고 빼기 위함이다.


결과는 
통과이다.


추가적으로 비슷하지만 다른 방법을 이용할 수 있다.
9명중 7명을 선택하는 것은 9명중 2명을 선택하는 것과 같은것을 이용하면 된다.
그럼 for문 2개로 문제를 해결할 수 있다.

코드는 아래와 같다.
~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Main
{
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		ArrayList<Integer> ans =new ArrayList<>();
		int[] arr =new int[9];
		int sum =0;
		boolean find =false;
		
		//input data
		for(int i =0; i <9; i++)
		{
			arr[i] =Integer.parseInt(br.readLine());
			sum +=arr[i];
		}
		Arrays.sort(arr);
		
		//pick
		for(int i =0; i <9; i++)
		{
			for(int j =i+1; j <9; j++)
			{
				if(sum -arr[i] -arr[j] ==100)
				{
					for(int k =0; k <9; k++)
					{
						if(k ==i || k ==j)
							continue;
						ans.add(arr[k]);
					}
						
					find =true;
					break;
				}
			}
			if(find)
				break;
		}
		for(int n : ans)
			bw.write(n +"\n");
		bw.flush();
	}
}
~~~
   

