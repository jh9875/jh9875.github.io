---
layout: post
title:  "[Baejoon] 11726번: 2xn 타일링"
date:   2020-03-13
categories: PROBLEM_SOLVING
permalink: /archivers/boj114726
tags: [dp]
---

## 문제

2xn 크기의 직사각형을 2x1, 1x2 직사각형으로 채우는 방법의 수를 구하는 문제이다.   
입력은 n이 주어지고, 출력은 방법의 수를 10007로 나눈 나머지를 출력한다.   

문제 링크 : <https://www.acmicpc.net/problem/11726>   

## 풀이
일단 2xn크기의 직사각형을 채우는 방법은 2가지가 있다.   
- 1x2 직사각형을 가로 1칸을 채우는 방법.
- 2x1 직사각형 2개를 가로 2칸 채우는 방법.

이 2가지 방법을 이용해서 n크기 직사각형을 채우면 1가지 방법이 된다.   

예를들어 설명해보자.   
만약 n이 5라고 해보자.
여기서 첫번째 방법을 쓰면 4칸이 남고, 두번째 방법을 쓰면 3칸이 남는다.

만약 첫번째 방법을 썼다고 하면 4칸이 남고, 아직 채워야 하는 칸이 남아있으므로 위 2가지
방법을 또 써야한다.

4칸이 남은상태에서 첫번째 방법을 쓰면 3칸이 남고, 두번째 방법을 쓰면 2칸이 남는다.

이런식으로 채우다가 채워야 하는 칸의수가 0이되면 1가지 방법이 된다.

일단 코드를 보자.

~~~java
static int tiling(int width)
{
	if(width <2)
		return 1;
	if(cache[width] !=-1)
		return cache[width];
	cache[width] =0;
	
	cache[width] =tiling(width-1)%MOD +tiling(width-2)%MOD;
	
	return cache[width]%MOD;
}
~~~

위 코드에서 width라는 파라미터는 남아있는, 즉 더 채워야 하는 칸의 수를 의미한다.   
여기서 tiling(width-1) 을 하면 첫번째 방법을 쓰게 된는것이고,
tiling(width-2)를 하면 두번째 방법을 쓰게 되는것이다.

두가지 방법을 쓸 수 있으므로 두 경우의 합을 반환하면 된다.

기저사례는 남아있는 칸이 2보다 작으면, 즉 1이하이면 1가지 방법밖에 없으므로 1을 반환한다.

그리고 cache가 의미하는 것은 중복계산을 피하기 위해 미리 계산해 둔 값을 이용하는 것이다.   
경우의 수를 따지는 문제를 풀다보면 중복계산을 하게되는 경우가 많다.
예를들어 n이 50이고 남아있는 칸의 수가 5라고 하자.   
그 전에 어떻게 채웠든 상관없이 나머지 5칸을 채우는 경우는 항상 같다.
그렇기 때문에 미리 계산해두고 기록 해둔다면 이 값을 이용할 수 있다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class Main
{
	static final int MOD =10007;
	static int[] cache =new int[1001];
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int ans, n;
		Arrays.fill(cache, -1);
		
		n =Integer.parseInt(br.readLine());
		ans =tiling(n);
		bw.write(ans +"\n");
		bw.flush();
	}
	
	static int tiling(int width)
	{
		if(width <2)
			return 1;
		if(cache[width] !=-1)
			return cache[width];
		cache[width] =0;
		
		cache[width] =tiling(width-1)%MOD +tiling(width-2)%MOD;
		
		return cache[width]%MOD;
	}
}
~~~

전체 코드

