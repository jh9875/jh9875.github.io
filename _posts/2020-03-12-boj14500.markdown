---
layout: post
title:  "[Baejoon] 14500번: 테트로미노"
date:   2020-03-12
categories: PROBLEM_SOLVING
permalink: /archivers/boj14500
tags: [brute_force]
---

## 문제

테트로미노는 4개의 정사각형을 이어 붙인 모형이다.   
각 정사각형은 다음과 같은 규칙이 있다.   
- 겹치면 안된다.   
- 모두 연결되어 있어야 한다.   
- 정사각형의 변끼리 연결되어 있어야 한다.   

그 예시는 다음과 같다.

![image](https://onlinejudgeimages.s3-ap-northeast-1.amazonaws.com/problem/14500/1.png)


N x M 크기의 종이의 각 줄에 수가 써있고, 테트로미노 모형을 만들어 종이위에 놓고 그 수가 최대가
되게 하는 수의 합을 구하는 문제이다. 


문제 링크 : <https://www.acmicpc.net/problem/14500>   


## 풀이
문제를 보고 어떤 방식으로 풀어볼까 생각하다가 모든 경우를 탐색해 보기로 했다.   
종이의 각 위치에서 시작해서 연결되어 있는 3개의 사각형을 이은뒤 가장 큰값을 반환하게 했다.   
그것을 구현한 코드는 다음과 같다.

~~~java
static int solve()
{
	int max =0;
	for(int i =0; i <N; i++)
	{
		for(int j =0; j <M; j++)
		{
			visited[i][j] =true;
			max =Math.max(max, search(i, j, 1));
			visited[i][j] =false;
		}
	}
	return max;
}

static int search(int y, int x, int cnt)
{
	if(cnt >4)
		return 0;
	int ret =-4000;
		
	for(int dir =0; dir <4; dir++)
	{
		int nextY =y +dirY[dir];
		int nextX =x +dirX[dir];
			
		if(!inRange(nextY, nextX)) continue;
		if(visited[nextY][nextX]) continue;
			
		visited[nextY][nextX] =true;
		ret =Math.max(ret, search(nextY, nextX, cnt+1) +paper[y][x]);
		visited[nextY][nextX] =false;
	}
	return ret;
}
~~~

탐색은 solve함수에서 부터 시작한다.   
종이의 모든 위치를 시작지점으로 잡고 테트로미노의 값이 최대가 되는 값을 반환한다.   
search함수는 현재 위치에서 이동 가능한 다음 위치를 재귀적으로 찾고 포함된 위치의 종이 값을 모두 더한다.   
겹치치 않게하기 위해서 visited라는 boolean배열을 이용했다.   
이정도만 하면 정답일줄 알았다.


하지만 코드를 완성하고 예제를 테스트 해보는데 계속 이상한 결과가 나왔다.   
한참을 헤메다가 답을 찾았다.   
위 그림에서 오른쪽 아래에 있는 도형을 생각하지 못한것이다.   
그 도형을 탐색하기 위해서 추가적으로 함수를 만들었다.   
코드는 아래와 같다.

~~~java
static int exceptionCase(int y, int x)	//한번에 그려지지 않는 모형
	{
		int ret =paper[y][x];
		int cnt =0, sum =0;
		for(int dir =0; dir <4; dir++)
		{
			int nextY =y +dirY[dir];
			int nextX =x +dirX[dir];
			if(inRange(nextY, nextX))
			{
				cnt++;
				sum +=paper[nextY][nextX];
			}
		}
		if(cnt ==3)			//주변 3개인 경우.
			ret +=sum;
		else if(cnt <3)		//모서리인 경우
			return -4000;
		else				//주변 4개인 경우.
		{
			int min =1001;
			for(int dir =0; dir <4; dir++)		//주위 4개중 가장 작은값을 빼줌.
			{
				int nextY =y +dirY[dir];
				int nextX =x +dirX[dir];
				min =Math.min(min, paper[nextY][nextX]);
			}
			ret =ret +sum -min;
		}
		return ret;
	}
~~~

내가 생각한 방법은 현재 탐색하는 위치 y,x에서 주위에 이어 붙일 수 있는 도형의 갯수가 2개면
모서리 부분이므로 음수를 반환해 답이 되지 못하게 했다.   
주위 이어 붙일 수 있는 도형의 갯수가 3개이면 그대로 반환했다.   
4개이면 주위 도형 의 모든 합에서 가장 작은 값을 뺀 전체 값을 반환하게 했다.


~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static int[] dirY = {1, 0, -1, 0};
	static int[] dirX = {0, 1, 0, -1};
	static int N, M;
	static int[][] paper;
	static boolean[][] visited;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		paper =new int[N][M];
		visited =new boolean[N][M];
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <M; j++)
				paper[i][j] =Integer.parseInt(st.nextToken());
		}
		ans =solve();
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve()
	{
		int max =0;
		for(int i =0; i <N; i++)
		{
			for(int j =0; j <M; j++)
			{
				visited[i][j] =true;
				max =Math.max(max, search(i, j, 1));
				visited[i][j] =false;
				max =Math.max(max, exceptionCase(i, j));
			}
		}
		return max;
	}
	static int search(int y, int x, int cnt)
	{
		if(cnt >4)
			return 0;
		int ret =-4000;
		
		for(int dir =0; dir <4; dir++)
		{
			int nextY =y +dirY[dir];
			int nextX =x +dirX[dir];
			
			if(!inRange(nextY, nextX)) continue;
			if(visited[nextY][nextX]) continue;
			
			visited[nextY][nextX] =true;
			ret =Math.max(ret, search(nextY, nextX, cnt+1) +paper[y][x]);
			visited[nextY][nextX] =false;
		}
		return ret;
	}
	static int exceptionCase(int y, int x)	//한번에 그려지지 않는 모형
	{
		int ret =paper[y][x];
		int cnt =0, sum =0;
		for(int dir =0; dir <4; dir++)
		{
			int nextY =y +dirY[dir];
			int nextX =x +dirX[dir];
			if(inRange(nextY, nextX))
			{
				cnt++;
				sum +=paper[nextY][nextX];
			}
		}
		if(cnt ==3)			//주변 3개인 경우.
			ret +=sum;
		else if(cnt <3)		//모서리인 경우
			return -4000;
		else				//주변 4개인 경우.
		{
			int min =1001;
			for(int dir =0; dir <4; dir++)		//주위 4개중 가장 작은값을 빼줌.
			{
				int nextY =y +dirY[dir];
				int nextX =x +dirX[dir];
				min =Math.min(min, paper[nextY][nextX]);
			}
			ret =ret +sum -min;
		}
		return ret;
	}
	static boolean inRange(int y, int x)
	{
		if(y <0 || y >=N || x <0 || x >=M)
			return false;
		return true;
	}
}
~~~

전체 코드

