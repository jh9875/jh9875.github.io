---
layout: post
title:  "[Baejoon] 1476번: 날짜 계산"
date:   2020-03-12
categories: PROBLEM_SOLVING
permalink: /archivers/boj1476
tags: [baekjoon , brute_force, math]
---

## 문제

문제를 간략히 요약해 보자면 다른 날짜 체계를 사용하는 시스템의 날짜를 우리가 아는 날짜 쳬계로 변환하는 문제이다.
날짜를 E, S, M 3개의 수로 표현하는데 각각의 수는 (1 ≤ E ≤ 15, 1 ≤ S ≤ 28, 1 ≤ M ≤ 19)의
범위를 갖는다. 예를들면 우리가 아는 1년은 1, 1, 1 이고 다음년도는 2, 2, 2 ... 이런식으로 연도가 증가한다.
그리고 E의 최대범위가 15이므로 16연도는 1, 16, 16 으로 표현한다.
E, S ,M이 주어질 때 가장 빠른 연도를 출력하면 된다.


문제 링크 : <https://www.acmicpc.net/problem/1476>   


## 풀이
처음 문제를 봤을 때 가장 먼저 떠오른 방법은 숫자를 증가해 가면서 모든 경우를 탐색해보는 방법을 떠올렸다.   
변수 3개 e, s, m을 각각 1로 초기화 하고 반복문을 무한으로 돌리며 원하는 숫자가 나오면 멈추고 수를
반환하는 방식이다. 그 방법을 구현한 코드는 아래와 같다.

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int E, S, M, ans;
		
		st =new StringTokenizer(br.readLine());
		E =Integer.parseInt(st.nextToken());
		S =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		
		ans =solve(E, S, M);
		bw.write(ans +"\n");
		bw.flush();
	}
	
	static int solve(int E, int S, int M)
	{
		int ret =1;
		int e =1, s =1, m =1;
		
		while(true)
		{
			if(e ==E && s ==S && m ==M)
				break;
			ret++;
			e++; s++; m++;
			if(e ==16)
				e =1;
			if(s ==29)
				s =1;
			if(m ==20)
				m =1;
		}
		return ret;
	}
}
~~~

정말 단순하게 모든 수를 증가시키고, 범위를 초과하면 1로 만드는 방식을 써봤다.
위 코드는 해석할 것도 없다. 정말 단순한 방식으로 풀었다.


결과는 통과이다.


다른분들은 어떤방식으로 풀었나 인터넷 서치를 해봤더니 대부분 방식이 비슷했다.   
다만 차이점이 있는 부분이 있다면 나머지 연산을 사용했다는 점이다.
코드의 핵심부분은 아래와 같다.

~~~java
int ret =1;
while(true)
{
	if((ret -E)%15 ==0 && (ret-S)%28 ==0 && (ret-M)%19 ==0)
		break;
	ret++;
}
~~~  

코드가 더 깔끔해 보이고 좋은것 같다.   



