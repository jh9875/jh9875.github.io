---
layout: post
title:  "[Baejoon] 10819번: 가장 긴 증가하는 부분 수열"
date:   2020-03-19
categories: PROBLEM_SOLVING
permalink: /archivers/boj11053
tags: [dp]
---

## 문제

N개의 수열이 주어졌을 때 가장 긴 증가하는 부분 수열을 구하는 문제이다.   

문제 링크 : <https://www.acmicpc.net/problem/11053>   

## 풀이
이 문제를 모든 경우를 탐색한다고 해보자.   
그럼 함수는 다음과 같이 만들 수 있을 것이다.   

~~~java
static int lis(int index)
{
	int ret =1;
	for(int next =index+1; next <N; next++)
		if(index ==-1 || arr[index] <arr[next])
			ret =Math.max(ret, lis(next) +1);
	return ret;
}
~~~

위 코드는 이전에 뽑은 수를 index에 있는 수라고 하고 for문을 통해 다음 뽑을 수를 찾는 코드함수이다.   
index가 -1인 경우를 고려한 이유는 코드를 깔끔하게 짜기 위해서이다.   

~~~java
if(index ==-1 || arr[index] <arr[next])
		ret =Math.max(ret, lis(next) +1);
~~~

if문 안에 증가하는 부분이라면 lis함수를 통해 다음 뽑을 인덱스를 파라미터로 넘겨준다.   
list(next)에 1을 더하는 이유는 뽑은 갯수를 나타내기 위해서이다.   
한개 씩 뽑을 때 마다 1을 더해주고 재귀호출을 하기 때문에 다시 돌아올때는 뽑은 갯수의 길이를
반환하게 된다.   

그러나 코드를 위와 같이 만들면 시간복잡도가 O(n^2)에 가깝게 된다.   
최악의 경우 1000000개 정도를 탐색해야 된다.   

그러나 위 탐색방법에는 중복계산 되는 부분이 있다.  
함수는 재귀함수를 이용하므로 수열의 뒷부분에 있는 길이는 여러번 계산될 수 있다.   
   
예를 들어 문제의 예제처럼 10, 20, 10, 30, 20, 50인 경우   
1,2,4,6번째가 정답이고 길이는 4이다.   
처음 10에서 부터 시작해서 그 다음은 20을 뽑는다. 그 다음 30을 뽑고, 다음은 50을 뽑는다.   
그리고 더이상 뽑을게 없으므로 재귀함수는 다시 10을 뽑는 함수로 되돌아 온다.   
10을 뽑았을 때 길이를 ret이라는 변수에 저장해두고 반복문에 의해 다음 20을 시작위치로 하고
증가하는 부분을 탐색한다.   
20다음에는 30이 오고 그 다음 50이 온다.   
더이상 뽑을게 없으므로 다시  함수는 20을 봅았을 때로 돌아오고 또 다시 반복문에 의해 다음 시작위치
10을 정하고 다시 시작된다.   

여기서 중복계산 되는 부분이 있다.   
뒤에 있는 증가하는 부분이 여러번 계산된다.   
이러한 문제는 cache를 사용함으로써 해결 할 수있다.   

단순히 cache라는 int형 변수에 index번째의 최대길이가 얼마였는지 기록해두면 된다.   
그것을 구현한 코드는 아래와 같다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static int[] arr;
	static int[] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans =0;
		
		N =Integer.parseInt(br.readLine());
		arr =new int[N];
		cache =new int[N+1];
		Arrays.fill(cache, -1);
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <N; i++)
			arr[i] =Integer.parseInt(st.nextToken());
		
		ans =lis(-1) -1;
		bw.write(ans +"\n");
		bw.flush();
	}
	
	static int lis(int index)
	{
		if(cache[index+1] !=-1)
			return cache[index+1];
		cache[index+1] =1;
		for(int next =index+1; next <N; next++)
			if(index ==-1 || arr[index] <arr[next])
				cache[index+1] =Math.max(cache[index+1], lis(next) +1);
		return cache[index+1];
	}
}
~~~

전체 코드

