---
layout: post
title:  "[Baejoon] 14888번: 연산자 끼워넣기"
date:   2020-03-21
categories: PROBLEM_SOLVING
permalink: /archivers/boj14888
tags: [brute_force]
---

## 문제

숫자 N과 N개의 수로 이루어진 수열이 있을 때,
N-1개의 연산자를 이용하여 최대, 최소값을 구하는 문제이다.   

문제 링크 : <https://www.acmicpc.net/problem/14888>   

## 풀이

일단 문제 입력의 크기 N의 최댓값이 크지 않기 때문에 brute_force방식을 사용했다.   
수열은 그대로 냅두고, N-1개의 연산자들의 순서를 바꿔가면서 모든 연산자를 사용한 경우
연산을 한 후, 최대, 최소값을 구해서 문제를 풀었다.   

일단 연산자들의 순서를 정하는 코드를 보자.   

~~~java
static void solve(int rest)
{
	if(rest ==0)
	{
		calc();
		return;
	}
		
	for(int i =0; i <4; i++)
	{
		if(oper[i] !=0)
		{
			stack.add(i);
			oper[i]--;
			solve(rest-1);
			stack.pop();
			oper[i]++;
		}
	}
}
~~~

함수의 파라미터 rest는 사용해야 하는 연산자들의 남은 갯수를 의미한다.   
rest가 0이 되면 연산을 하도록 함수의 앞부분에 나와있다.   
그리고 밑에있는 for문은 남아있는 연산자들을 사용하는 부분이다.   
stack을 사용하는 이유는 모든순서를 탐색하기 유용하기 때문에 사용했다.   
solve(rest-1)을 함으로써 재귀적으로 문제를 해결했다.   

그 다음 결과를 계산하는 코드는 더 간단하다.   

~~~java
static void calc()
{
	Iterator<Integer> it =stack.iterator();
	int i =1, op =0;
	int result =arr[0];
		
	while(it.hasNext())
	{
		op =it.next();
		if(op ==0)
			result +=arr[i];
		else if(op ==1)
			result -=arr[i];
		else if(op ==2)
			result *=arr[i];
		else if(op ==3)
			result /=arr[i];
		i++;
	}
	if(result >max)
		max =result;
	if(result <min)
		min =result;
}
~~~

stack을 통해 임의의 순서대로 연산자들을 쌓았으니 연산자들의 순서를
처음부터 확인하기 위해 iterator를 사용했다.   
그런 후 result에 결과를 저장하면서 계산 후 max, min을 최신화 했다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Iterator;
import java.util.Stack;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static int max =Integer.MIN_VALUE;
	static int min =Integer.MAX_VALUE;
	static int[] arr;
	static int[] oper =new int[4];
	static Stack<Integer> stack =new Stack<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		N =Integer.parseInt(br.readLine());
		arr =new int[N];
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <N; i++)
			arr[i] =Integer.parseInt(st.nextToken());
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <4; i++)
			oper[i] =Integer.parseInt(st.nextToken());
		solve(N-1);
		bw.write(max +"\n");
		bw.write(min +"\n");
		bw.flush();
	}
	static void solve(int rest)
	{
		if(rest ==0)
		{
			calc();
			return;
		}
		
		for(int i =0; i <4; i++)
		{
			if(oper[i] !=0)
			{
				stack.add(i);
				oper[i]--;
				solve(rest-1);
				stack.pop();
				oper[i]++;
			}
		}
	}
	static void calc()
	{
		Iterator<Integer> it =stack.iterator();
		int i =1, op =0;
		int result =arr[0];
		
		while(it.hasNext())
		{
			op =it.next();
			if(op ==0)
				result +=arr[i];
			else if(op ==1)
				result -=arr[i];
			else if(op ==2)
				result *=arr[i];
			else if(op ==3)
				result /=arr[i];
			i++;
		}
		if(result >max)
			max =result;
		if(result <min)
			min =result;
	}
}
~~~

전체 코드


