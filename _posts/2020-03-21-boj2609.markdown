---
layout: post
title:  "[Baejoon] 2609번: 최대공약수와 최소공배수"
date:   2020-03-21
categories: PROBLEM_SOLVING
permalink: /archivers/boj2609
tags: [math]
---

## 문제

10000이하 두개의 자연수가 주어질 때, 최대 공약수, 최소 공배수를 구하는 문제이다.     

문제 링크 : <https://www.acmicpc.net/problem/2609>   

## 풀이

일단 문제의 입력이 10000이하라서 가장 단순하게 풀어도 될것같다라는 느낌이 들었다.   
계산하기 귀찮은것도 있고 해서 가장 단순한 방법으로 풀어봤다.   

일단 최대공약수이다.   

~~~java
static int gcd(int a, int b)
{
	int ret = a >b? a: b;
	while(true)
	{
		if(a%ret ==0 && b%ret ==0)
			break;
		ret--;
	}
	return ret;
}
~~~

아주 단순하게 했다.   
최대공약수란 두 수 공통의 약수 중 최대인 것을 구하는 것이기 때문에 공통의 수 중
나누어 떨어지는 최대의 값을 반환하도록 했다.   
반환값은 두 수 중 큰값부터 시작했다.   

이건 어디까지나 문제의 입력이 크지 않기 때문에 10000정도는 컴퓨터가 빨리
계산할 수 있어서 이런식으로 해봤다.   

최소 공배수는 두수의 공통의 배수 중 최소값을 의미한다.    
최소 공배수도 비슷하게 풀었다.   
반환값을 두 수중 큰 수로 시작하고, 반환값을 두 수로 나누어 떨어지는 수를 반환하도록
했다. 

~~~java
static int lcm(int a, int b)
{
	int ret = a >b? a: b;
	while(true)
	{
		if(ret%a ==0 && ret%b ==0)
			break;
		ret++;
	}
	return ret;
}
~~~

단순하게 풀이한 전체 코드는 다음과 같다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int a, b;
	
		st =new StringTokenizer(br.readLine());
		a =Integer.parseInt(st.nextToken());
		b =Integer.parseInt(st.nextToken());
		bw.write(gcd(a, b) +"\n");
		bw.write(lcm(a, b) +"\n");
		bw.flush();
	}
	static int gcd(int a, int b)
	{
		int ret = a >b? a: b;
		while(true)
		{
			if(a%ret ==0 && b%ret ==0)
				break;
			ret--;
		}
		return ret;
	}
	static int lcm(int a, int b)
	{
		int ret = a >b? a: b;
		while(true)
		{
			if(ret%a ==0 && ret%b ==0)
				break;
			ret++;
		}
		return ret;
	}
}
~~~

뭔가 이대로 끝내긴 아쉬워서 다른방법을 찾아봤다.   
최대 공약수를 구하는 방법 중 유클리드 알고리즘(Euclidean algorithm)이라는 것이 있었다.   
이름은 많이 들어봤지만 어떤것인지 찾아본적은 없었다.   
그래서 이번 기회에 한번 알아봤다.   

유클리드 알고리즘은 다음과 같다.   

> 두 수 p, q(p>q)의 공약수의 집합은 p-q와 q의 공약수 집합과 같다는 점을 이용한다.

gcd(p,q)는 gcd(p-q,q)와 같다는 것이다.   
예를 들면 p, q가 6, 15이면   
gcd(6,15) = gcd(9,6) = gcd(6,3) =gcd(3,3) =gcd(3,0)

유클리드 알고리즘을 반복하면 위와같이 된다는 것이다.   
그럼 같은 기능을 여러번 사용하니까 재귀함수로 만들면 깔끔할 것이다.   

근데 만약 두 수의 차이가 큰 경우에는 재귀함수가 여러번 호출 될 것이다.   
예를들어 p가 1024이고, q가 6이라면
gcd(1024,6) = gcd(1018,6) = ...   
이런식으로 많이 호출될 것이다.   

이것을 해결하기 위해 나머지를 이용하면 된다.   
위의 예에서 1024를 6으로 나눈 나머지는 4이다.   
이는 1024-6을 170번 해야 나오는 값이다.   
따라서 효율이 매우 좋아진다.   
그것을 구현한 코드는 아래와 같다.   

~~~java
static int gcd(int a, int b)
{
	if(b ==0) return a;
	return gcd(b, a%b);
}
~~~

코드가 많이 깔끔하다.  

출처: [프로그래밍 대회에서 배우는 알고리즘 문제해결전략] 


그렇다면 최소공배수는 어떻게 구할것인가?   

> 최대공약수 X 최소공배수 = A X B

라는 사실을 이용하는 것이다.   
이 사실을 몰랐으나 인터넷 찾아보면서 알게되었다....    
아무튼 위 식에서 나온 결과를 이용해보면   

> 최소공배수 = A X B / 최대공약수

이다.   
 
위 과정을 구현한 전체 코드는 다음과 같다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int a, b;
	
		st =new StringTokenizer(br.readLine());
		a =Integer.parseInt(st.nextToken());
		b =Integer.parseInt(st.nextToken());
		bw.write(gcd(a, b) +"\n");
		bw.write(a*b/gcd(a,b) +"\n");
		bw.flush();
	}
	static int gcd(int a, int b)
	{
		if(b ==0) return a;
		return gcd(b, a%b);
	}
}
~~~

전체 코드


