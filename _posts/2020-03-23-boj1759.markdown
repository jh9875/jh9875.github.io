---
layout: post
title:  "[Baejoon] 1759번: 암호 만들기"
date:   2020-03-23
categories: PROBLEM_SOLVING
permalink: /archivers/boj1759
tags: [brute_force]
---

## 문제

입력의 첫째줄에 2개의 정수 L, C가 주어지고 둘째줄엔 C개의 문자가 주어질때,   
L개의 문자를 조합해서 암호를 만들어라.   
단 조건이 있는데 다음과 같다.   

> 최소 한개의 모음, 두개의 자음이 있어야 한다.
> 알파벳이 암호에서 증가하는 순서로 배열되어 있어야 한다.

위 조건을 만족하는 모든 암호를 출력하라.   

문제 링크 : <https://www.acmicpc.net/problem/1759>   

## 풀이

이 문제도 어렵지 않게 모든 조합을 만들어 내면 되는 문제이다.   

문제의 조건 중 알파벳이 증가하는 순서로 배열되어 있어야 되는 조건이 있다.   
이 조건은 알파벳을 배열에 입력받고, 정렬하면 해결 된다.   

다른 조건 한개는 단순히 조건을 확인해 보면 된다.   
함수는 다음과 같다.   

~~~java
static boolean checkCondition(String s)
{
	if(s.length() !=L)
		return false;
	int vow =1, con =2;
	for(int i =0; i <L; i++)
	{
		if(s.charAt(i) =='a' || s.charAt(i) =='e' || s.charAt(i) =='i' ||
				s.charAt(i) =='o' || s.charAt(i) =='u')
			vow--;
		else
			con--;
		if(vow <=0 && con <=0)
			return true;
	}
	return false;
}
~~~

vow는 모음을 뜻하고, con은 자음을 뜻한다.   
vow 1개 con 2개가 있으면 참을 반환하고, 아니면 거짓을 반환하도록 했다.   

그래고 탐색 함수를 다음과 같이 만들었다.   

~~~java
static void solve(int index, String password) throws Exception
{
	if(password.length() ==L)
	{
		if(!checkCondition(password))
			return;
		bw.write(password +"\n");
	}
	for(int next =index+1; next <C; next++)
		solve(next, password +pw[next]);
}
~~~

함수의 파라미터 index는 C개의 알파벳을 담은 배열의 인덱스이다.   
뽑을 인덱스를 표현한다.   
for문에서 next를 표현한 이유는 알파벳 증가하는 순서로 해야하기 때문이다.   

전체코드는 다음과 같다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));;
	static int L, C;
	static char[] pw;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		st =new StringTokenizer(br.readLine());
		L =Integer.parseInt(st.nextToken());
		C =Integer.parseInt(st.nextToken());
		pw =new char[C];
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <C; i++)
			pw[i] =st.nextToken().charAt(0);
		Arrays.sort(pw);
		solve(-1, "");
		bw.flush();
	}
	static void solve(int index, String password) throws Exception
	{
		if(password.length() ==L)
		{
			if(!checkCondition(password))
				return;
			bw.write(password +"\n");
		}
		for(int next =index+1; next <C; next++)
			solve(next, password +pw[next]);
	}
	static boolean checkCondition(String s)
	{
		if(s.length() !=L)
			return false;
		int vow =1, con =2;
		for(int i =0; i <L; i++)
		{
			if(s.charAt(i) =='a' || s.charAt(i) =='e' || s.charAt(i) =='i' ||
					s.charAt(i) =='o' || s.charAt(i) =='u')
				vow--;
			else
				con--;
			if(vow <=0 && con <=0)
				return true;
		}
		return false;
	}
}
~~~

전체 코드

