---
layout: post
title:  "[Baejoon] 14501번: 퇴사"
date:   2020-03-24
categories: PROBLEM_SOLVING
permalink: /archivers/boj14501
tags: [brute_force]
---

## 문제

문제의 첫줄에 자연수 N(1 <= N <=15)이 주어지고, 둘째줄에 Ti, Pi가 주어진다.   
Ti는 상담하는데 걸리는 날짜를 의미하고, Pi는 받을 수 있는 금액을 의미한다.   
날짜가 겹쳐서는 안되고 N을 초과해서도 안된다.   
받을 수 있는 최대금액을 수하시오.   

문제 링크 : <https://www.acmicpc.net/problem/14501>   

## 풀이

이 문제도 다른 완전탐색 문제랑 비슷하다.   
다만 날짜가 겹치게 해서는 안되고, 범위를 초과하는 경우에도 잘 처리해주어야 한다.   
함수의 중요부분은 아래와 같다.   

~~~java
static int solve(int index)
{
	if(index >=N)
		return Integer.MIN_VALUE;
	int ret =0;
	for(int i =index+1; i <N; i++)
		ret =Math.max(ret, solve(i +T[i]-1) +P[i]);
	return ret;
}
~~~

일단 기저사례를 보면 index>=N인 경우이다.   
이는 현재 날짜에 Ti만큼의 시간을 더했을 때 날짜를 초과하는 경우를 생각한것이다.   
그럼 -무한대의 값을 반환해서 답에서 배제되도록 해야한다.   
그리고 반복문에서 반환값을 Math.max로 최댓값이 되도록 한다.   
solve(i +T[i]-1) +P[i]가 의미하는 것은 현재 날짜에 T[i]의 시간이 흐르고 P[i]의
돈을 받는것이다.   
이 값이 최댓값이 되도록 계산해야 한다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static int[] T;
	static int[] P;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		N =Integer.parseInt(br.readLine());
		T =new int[N];
		P =new int[N];
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			T[i] =Integer.parseInt(st.nextToken());
			P[i] =Integer.parseInt(st.nextToken());
		}
		bw.write(solve(-1) +"\n");
		bw.flush();
	}
	static int solve(int index)
	{
		if(index >=N)
			return Integer.MIN_VALUE;
		int ret =0;
		for(int i =index+1; i <N; i++)
			ret =Math.max(ret, solve(i +T[i]-1) +P[i]);
		return ret;
	}
}
~~~

전체 코드


 