---
layout: post
title:  "[Baejoon] 15658번: 연산자 끼워넣기(2)"
date:   2020-03-24
categories: PROBLEM_SOLVING
permalink: /archivers/boj15658
tags: [brute_force]
---

## 문제

N개의 수열이 주어지고, 연산자의 갯수가 주어질때, 계산값의 최대, 최소값을 구하여라.   
연산자의 갯수는 N보다 많을 수 있다.   

문제 링크 : <https://www.acmicpc.net/problem/15658>   

## 풀이

문제를 해결하는 함수를 재귀함수로 만들어봤다.   
함수는 아래와 같다.   

~~~java
static void solve(int index, int sum)
{
	if(index ==N)
	{
		if(sum >max)
			max =sum;
		if(sum <min)
			min =sum;
		return;
	}
	for(int i =0; i <4; i++)
	{
		if(operator[i] !=0)
		{
			operator[i]--;
			if(i ==0)
				solve(index+1, sum +arr[index]);
			else if(i ==1)
				solve(index+1, sum -arr[index]);
			else if(i ==2)
				solve(index+1, sum *arr[index]);
			else if(i ==3)
				solve(index+1, sum /arr[index]);
			operator[i]++;
		}
	}
}
~~~
수열의 모든 수를 계산했으면 최대 최솟값을 확인하는 과정을 거치도록 했다.   
반복문에서는 연산을 할것을 결정했다.   
각 숫자에 까라 연산을 하고, 0이면 다른연산을 하도록 했다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main
{
	static int max =Integer.MIN_VALUE;
	static int min =Integer.MAX_VALUE;
	static int N;
	static int[] arr;
	static int[] operator;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		
		N =Integer.parseInt(br.readLine());
		arr =new int[N];
		operator =new int[4];
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <N; i++)
			arr[i] =Integer.parseInt(st.nextToken());
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <4; i++)
			operator[i] =Integer.parseInt(st.nextToken());
		solve(1, arr[0]);
		bw.write(max +"\n");
		bw.write(min +"\n");
		bw.flush();
	}
	static void solve(int index, int sum)
	{
		if(index ==N)
		{
			if(sum >max)
				max =sum;
			if(sum <min)
				min =sum;
			return;
		}
		for(int i =0; i <4; i++)
		{
			if(operator[i] !=0)
			{
				operator[i]--;
				if(i ==0)
					solve(index+1, sum +arr[index]);
				else if(i ==1)
					solve(index+1, sum -arr[index]);
				else if(i ==2)
					solve(index+1, sum *arr[index]);
				else if(i ==3)
					solve(index+1, sum /arr[index]);
				operator[i]++;
			}
		}
	}
}
~~~

전체 코드

