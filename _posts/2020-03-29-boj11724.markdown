---
layout: post
title:  "[Baejoon] 11724번: 연결 요소의 개수"
date:   2020-03-29
categories: PROBLEM_SOLVING
permalink: /archivers/boj11724
tags: [bfs, dfs]
---

## 문제

문제에서 정점의 개수 N, 간선의 개수 M이 주어질 때   
그래프의 연결 요소의 개수를 구하는 문제이다.   

문제 링크 : <https://www.acmicpc.net/problem/11724>   

## 풀이

문제다 복잡하지 않고 하나의 개념만 알면 해결할 수 있는 문제이다.   
나는 문제를 dfs로 해결해 봤다.   

일단 1번 정점부터 N번 정점까지 모든 정점을 시작위치로 한다.   
시작위치 정점으로 부터 연결되어 있는 모든 정점을 boolean배열에 방문한 표시를 남긴다.   

시작점으로부터 연결되어 있는 모든 정점을 방문했으므로 1개의 연결요소가 된다.   

이런식으로 방문하지 않은 시작정점을 탐색해 가면서 아직 방문하지 않았다면
그 정점을 시작으로 연결되어 있고 방문하지 않은 모든 정점을 탐색한다.

~~~java
static int solve()
{
	int ret =0;
	boolean[] visited =new boolean[N+1];
	for(int start =1; start <=N; start++)
	{
		if(!visited[start])
		{
			search(start, visited);
			ret++;
		}
	}
	return ret;
}
~~~

위 코드는 1부터 N까지 모든 정점을 시작위치로 해보고 아직 방문하지 않았다면
탐색을 하고 연결요소의 개수를 하나 늘리는 코드이다.   

~~~java
static void search(int index, boolean[] visited)
{
	visited[index] =true;
	for(int next =1; next <=N; next++)
		if(!visited[next] && graph[index][next])
			search(next, visited);
}
~~~

search함수는 위와 같다.   
이 코드도 solve함수와 비슷하다.   
다른점이 있다면 여기서는 연결여부를 확인한다.   
graph[index][next]에서 현재정점의 번호가 index일때
다음정점의 번호가 next라고 한다면 연결되어 있어야 탐색할 수 있다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static int N;
	static boolean[][] graph;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int M, ans, u, v;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		graph =new boolean[N+1][N+1];
		for(int i =0; i <M; i++)
		{
			st =new StringTokenizer(br.readLine());
			u =Integer.parseInt(st.nextToken());
			v =Integer.parseInt(st.nextToken());
			graph[u][v] =true;
			graph[v][u] =true;
		}
		ans =solve();
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve()
	{
		int ret =0;
		boolean[] visited =new boolean[N+1];
		for(int start =1; start <=N; start++)
		{
			if(!visited[start])
			{
				search(start, visited);
				ret++;
			}
		}
		return ret;
	}
	static void search(int index, boolean[] visited)
	{
		visited[index] =true;
		for(int next =1; next <=N; next++)
			if(!visited[next] && graph[index][next])
				search(next, visited);
	}
}
~~~

전체 코드


