---
layout: post
title:  "[Baejoon] 1463번: 1로 만들기"
date:   2020-03-30
categories: PROBLEM_SOLVING
permalink: /archivers/boj1463
tags: [dp]
---

## 문제

정수 N이 주어졌을 때 문제에서 제시하는 연산을 이용하되 최소한의 연산을 이용해서
1로 만들어야 한다.   

문제에서 제시하는 연산은 다음과 같다.   

- N이 3으로 나누어 떨어지면, 3으로 나눈다.
- N이 2로 나누어 떨어지면, 2로 나눈다.
- 1을 밴다.


문제 링크 : <https://www.acmicpc.net/problem/1463>   

## 풀이

이 문제도 모든 경우를 탐색해보면 답을 알 수 있다.   
문제에 있는 조건 그대로 탐색해보면 된다.   

그런데 문제를 해결하는 과정을 잘 살펴보면 계산을 중복으로 하는 경우를 찾아볼 수 있다.   

예를들어 입력으로 9가 들어왔다고 해보자.   
그럼 3으로 나눌 수 도 있고, 1을 뺄수도 있다.   

일단 3으로 나눈다고 해보자.   
3으로 나누면 3이되고, 또 3으로 나누면 1이 된다.   

3에서 1번의 연산으로 1로 만들 수 있다.   
1을 뺀다고 하면 2가 된다.   
2가 되면 2로 나누거나 1로 빼는 연산을 할 수 있다.   
3에서 1을 뺀다고 하면 2번의 연산을 해야한다.   
여기서 최소의 연산을 하게 하는 경우는 3에서 3을 나눈 경우다.   

즉 3보다 큰 숫자에서 연산이 어떻든 간에 3에선 1번의 연산으로 1을 만들 수 있다.   

그렇다면 처음 9가 어떠한 연산으로 줄어서 4가 되었다고 해보자.   
4에서는 2로 나눌 수 있고, 1을 뺄 수도 있다.   
여기서 1을 뺀다고 하면 N은 3이 되는데 3에서의 최소한의 연산은 1이다.   
이는 이전에 계산한 값이다.   

이와같이 모든 경우를 탐색할 땐 중복된 계산이 생기고   
연산을 빨리하기 위해선 이미 계산된 값을 다시 쓸 필요가 있다.   
N이 작을 땐 상관없지만 큰 수일때는 이 방법이 효과적일 것이다.   

이 방법은 cache를 이용하면 된다.   
int형 배열을 cache로 이용하는 것인데, 각 인덱스를 N이라고 생각하고,   
인덱스에 있는 값을 그 인덱스값 N에서 1로 만드는 최소한의 연산 수라고 하면 된다.   


~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;

public class Main
{
	static final int MAX =987654321;
	static int[] cache;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		int N, ans;
		
		N =Integer.parseInt(br.readLine());
		cache =new int[N+1];
		Arrays.fill(cache, -1);
		ans =solve(N);
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve(int n)
	{
		if(n ==1)
			return 0;
		if(cache[n] !=-1)
			return cache[n];
		int ret =MAX;
		if(n >0)
		{
			if(n%3 ==0)
				ret =Math.min(ret, solve(n/3) +1);
			if(n%2 ==0)
				ret =Math.min(ret, solve(n/2) +1);
			ret =Math.min(ret, solve(n-1) +1);
		}
		return cache[n] =ret;
	}
}
~~~

