---
layout: post
title:  "[Baejoon] 1978번: 소수 찾기"
date:   2020-03-30
categories: PROBLEM_SOLVING
permalink: /archivers/boj1978
tags: [math]
---

## 문제

문제에서 100이하 자연수 N과 N개의 1000이하 자연수가 주어질 때 소수를
찾는 문제이다.   

문제 링크 : <https://www.acmicpc.net/problem/1978>   

## 풀이

일단 소수란 약수가 1과 자신만 있는 자연수를 소수라고 한다.   

어떤 수 k를 소수인지 확인해 보기 위해 단순히 2부터 k-1까지 나눠보면 확인할 수 있다.   

하지만 소수를 구해야 하는 것이 여러가지인 경우 시간이 오래걸린다.   

이럴 경우 소수를 미리 구해놓고 확인하는 것이 좋다.   

예를들어 boolean배열에 소수이면 true, 아니면 false를 저장해 두면 바로 확인할 수 있다.      

여기에다 더 최적화를 할 수 있는 몇가지 원리가 있다.   

어떤 수 k가 소수이기 위해 2부터 k-1까지 나눠보는게 아니라 k의 제곱근 까지만 확인해 봐도 알 수 있다.   

문제에서 주어지는 수는 1000이하의 자연수 니까 1000의 제곱근 까지만 확인해 보면 된다.   

제곱근은 다음과 같이 구해주면 된다.   

~~~java
int sqrtNum =(int) Math.sqrt(NUM);
for(int i =2; i <=sqrtNum; i++)
{
	...
}
~~~

그럼 2부터 sqrtNum까지 확인해 보면 된다.   

여기서 최적화를 조금 더 해보자.   

만약 어떤 수 k가 소수라고 하자.   

그럼 k의 배수들은 k X num(num =1, 2, ..)의 형식으로 되기 때문에
소수가 아니다.   

당연하게도 소수가 아닌수의 배수도 소수가 아니다.   

그럼 코드로 구현해보자.   

~~~java
static void eratosthenes()
{
	pn =new boolean[NUM+1];
	Arrays.fill(pn, true);
	pn[0] =pn[1] =false;
	int sqrtNum =(int) Math.sqrt(NUM);
	for(int i =2; i <=sqrtNum; i++)
		if(pn[i])
			for(int j =i*i; j <=NUM; j +=i)
				pn[j] =false;
}
~~~

일단 NUM이하의 수 중 소수를 판단해야 한다고 할 때, 2부터 NUM의 제곱근 까지 확인한다.   

여기서 NUM제곱근 이하의 자연수 i가 소수이면 i제곱부터 NUM까지 i의 배수들을 소수가 아니라고 기록해 두는 코드이다.   

여기서 i제곱부터 시작한 이유는 2Xi나 3Xi는 이미 소수가 아니기 때문이다.   



~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static final int NUM =1000;
	static boolean[] pn;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int N, ans =0;
		eratosthenes();
		
		N =Integer.parseInt(br.readLine());
		st =new StringTokenizer(br.readLine());
		for(int i =0; i <N; i++)
			if(pn[Integer.parseInt(st.nextToken())]) ans++;
		bw.write(ans +"\n");
		bw.flush();
	}
	static void eratosthenes()
	{
		pn =new boolean[NUM+1];
		Arrays.fill(pn, true);
		pn[0] =pn[1] =false;
		int sqrtNum =(int) Math.sqrt(NUM);
		for(int i =2; i <=sqrtNum; i++)
			if(pn[i])
				for(int j =i*i; j <=NUM; j +=i)
					pn[j] =false;
	}
}
~~~

