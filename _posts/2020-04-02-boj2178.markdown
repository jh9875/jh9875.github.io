---
layout: post
title:  "[Baejoon] 2178번: 미로 탐색"
date:   2020-04-02
categories: PROBLEM_SOLVING
permalink: /archivers/boj2178
tags: [bfs]
---

## 문제

N x M 크기의 배열로 표현되는 미로가 주어질 때, (1,1)에서 (N,M)으로 갈때
지나야 하는 최소의 칸 수를 출력하는 문제이다.   

배열에서 1인 부분은 지나갈 수 있는 부분이고, 0이면 지나가지 못하는 부분이다.   

이동은 인접한 칸만 이동이 가능하다.   

문제 링크 : <https://www.acmicpc.net/problem/2178>   

## 풀이

bfs 문제이다.   

이동경로의 최솟값을 구하는 문제여서 bfs로 풀어야한다.   

dfs로 하면 최소 이동경로가 나오지 않을 수 있다.   

bfs코드는 아래와 같이 구현했다.   

~~~java
static int solve(int N, int M, boolean[][] map)
{
	boolean[][] visited =new boolean[N][M];
	Queue<Pos> queue =new LinkedList<>();
	queue.add(new Pos(0, 0, 1));
	while(!queue.isEmpty())
	{
		int y =queue.peek().y;
		int x =queue.peek().x;
		int n =queue.peek().n;
		queue.poll();
		if(y ==N-1 && x ==M-1)
				return n;
		for(int d =0; d <4; d++)
		{
			int nextY =y +dirY[d];
			int nextX =x +dirX[d];
			if(!inRange(nextY, nextX, N, M)) continue;
			if(visited[nextY][nextX]) continue;
			if(map[nextY][nextX])
			{
				visited[nextY][nextX] =true;
				queue.add(new Pos(nextY, nextX, n+1));
			}
		}
	}
	return -1;
}
~~~

bfs란 현재 위치에서 가까운 위치들 부터 탐색하는 방식이다.   

가까운 위치를 먼저 탐색하기 위해 queue를 이용했다.   

현재 위치를 기준으로 이동 가능한 다음 위치들을 모두 queue에 넣어주는 방식으로 풀었다.   



다만 개인적으로 문제를 풀다가 실수한 것이 있다.   

bfs를 할때 중복으로 계산하지 않기 위해 방문위치를 표시 해야한다.   

나는 위 코드에서 visited라는 boolean배열을 사용했다.   

그리고 방문 표시를 하는 부분도 중요하다.   

나는 처음에 실수로 위 코드에서 12번째 줄에 visited[y][x] =true라고 표시해줬다.   

그리고 예제는 모두 통과해서 문제를 제출했더니 메모리 초과가 나왔다.   

이런경우를 전에도 문제를 풀때 경험한 적이 있었다.   

그때는 queue에 들어가는 데이터가 많아서 떴었는데 이번경우도 똑같았다.   

원인은 12번째 줄에 방문표시를 한것이었다.   

12번째 말고 위 코드처럼 22에서 23번째 쯤에 넣어줬어야 했다.   

만약 12번째 넣었다면 중복계산 되는 경우가 있다.   

만약 배열이 다음과같이 있다고 해보자.   

1 2 3

4 5 6

7 8 9

위에서 1에서 9번까지 모두 1이라 하자.   

그럼 처음 1번 위치에서 2,4를 queue에 담는다.   

그런 후 2를 기준으로 3,5를 queue에 담는다.   

또 4를 기준으로 5,7을 queue에 담는다.   

그럼 여기서 5번위치를 2번 탐색하는 것이다.   

그러므로 queue에 넣을 때 방문위치를 표시 해야한다.   

문제의 크기가 최대 100x100이어서 무조건 시간초과, 메모리 초과가 떴을 것이다.   

예전에도 똑같은 실수를 했었는데 한동안 bfs문제를 안풀다 보니까 실수했다.   

참고 <https://www.acmicpc.net/board/view/41838>   


이것을 보고 처음 들었던 생각이 방문표시를 queue에 넣을때 표시하면 최단경로를
찾지 못하는게 아닌가 생각이 들었다.   

생각해보니 해당 위치에서 목적지까지 가는 최소경로만 구하면 되는것이기 때문에 상관이 없다.   

예를들어 위에서 5번 위치에서 9로 가는건 그 전 경로와 상관이 없다.   

그냥 그 전 경로의 길이만 있으면 된다.   



~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Pos
	{
		int y, x, n;
		Pos(int y, int x, int n)
		{
			this.y =y;
			this.x =x;
			this.n =n;
		}
	}
	static int[] dirY = {1, 0, -1, 0};
	static int[] dirX = {0, 1, 0, -1};
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		String input;
		int N, M, ans;
		boolean[][] map;
		
		st =new StringTokenizer(br.readLine());
		N =Integer.parseInt(st.nextToken());
		M =Integer.parseInt(st.nextToken());
		map =new boolean[N][M];
		for(int i =0; i <N; i++)
		{
			input =br.readLine();
			for(int j =0; j <M; j++)
			{
				if(input.charAt(j) =='1')
					map[i][j] =true;
				else
					map[i][j] =false;
			}
		}
		ans =solve(N, M, map);
		bw.write(ans +"\n");
		bw.flush();
	}
	static int solve(int N, int M, boolean[][] map)
	{
		boolean[][] visited =new boolean[N][M];
		Queue<Pos> queue =new LinkedList<>();
		queue.add(new Pos(0, 0, 1));
		while(!queue.isEmpty())
		{
			int y =queue.peek().y;
			int x =queue.peek().x;
			int n =queue.peek().n;
			queue.poll();
			if(y ==N-1 && x ==M-1)
				return n;
			for(int d =0; d <4; d++)
			{
				int nextY =y +dirY[d];
				int nextX =x +dirX[d];
				if(!inRange(nextY, nextX, N, M)) continue;
				if(visited[nextY][nextX]) continue;
				if(map[nextY][nextX])
				{
					visited[nextY][nextX] =true;
					queue.add(new Pos(nextY, nextX, n+1));
				}
			}
		}
		return -1;
	}
	
	static boolean inRange(int y, int x, int N, int M)
	{
		if(y <0 || y >=N || x <0 || x >=M)
			return false;
		return true;
	}
}
~~~


