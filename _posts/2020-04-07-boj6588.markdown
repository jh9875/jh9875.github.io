---
layout: post
title:  "[Baejoon] 6588번: 골드바흐의 추측"
date:   2020-04-07
categories: PROBLEM_SOLVING
permalink: /archivers/boj6588
tags: [math]
---

## 문제

문제에 짝수 정수 n(6 <= n <=1000000)이 주어지고 다음 조건을 만족하는 수를 만족하는
두 수를 찾아야 한다.   

> 4보다 큰 모든 짝수는 두 홀수 소수의 합으로 나타낼 수 있다.

문제의 입력은 짝수 정수가 주어지고 0이 입력되면 입력을 멈춘다.   

짝수 정수가 주어졌을 때 이를 만족하는 두 수 a, b를 다음과 같이 출력해야 한다.   

> n = a + b

이때 이 조건을 만족하는 a, b가 여러개라면 b-a가 가장 큰 값을 출력한다.   

문제 링크 : <https://www.acmicpc.net/problem/6588>   

## 풀이

이 문제는 단순하게 풀면 시간초과가 나온다.   

소수를 빠르게 구하고, 문제의 조건에 맞는 두 수도 빠르게 구해야 한다.   

일단 소수를 구하는 것은 에라토스테네스의 체를 이용하면 된다.   

~~~java
static void eratosthenes()
{
	isPrime =new boolean[NUM+1];
	Arrays.fill(isPrime, true);
	isPrime[0] =isPrime[1] =false;
	int sqrtLen =(int) Math.sqrt(NUM);
	
	for(int i =2; i <=sqrtLen; i++)
		if(isPrime[i])
			for(int j =i*i; j <=NUM; j +=i)
				isPrime[j] =false;
}
~~~

isPrime이라는 boolean배열을 소수를 판별하는 변수로 이용했다.   

각 인덱스마다 소수이면 true가 저장되어 있다.   

그 다음에 할 일은 조건에 맞는 두 수를 찾아야 한다.   

일단 문제에서 구하는 것은 조건에 맞는 a, b 중 b-a의 값이 가장 큰 값을 구하는 것이기 때문에
b는 n에 가까운 수부터 찾아봐야 한다.   

a는 n과 가장 차이가 많이 나는 수여야 한다.   

여기서 보통 두 수를 찾을 때 다음과 같이 하기 쉽다.   

~~~java
for(int b = ...)
	for(int a = ...
~~~

하지만 문제의 조건을 잘 이용하면 더 빠르게 해결할 수 있다.   

a+b가 n이라는 것을 이용해야한다.   

그럼 a =n-b이다.   

즉, 수를 찾을 때 b가 정해지면 a도 정해지는 것이다.   

이는 반복문 한개만 있어도 찾을 수 있다는 것이다.   

~~~java
for(int b = ...)
	int a =n-b; ...
~~~

위와같이 하면 1개의 반복문으로 해결 가능하다.   

그리고 두 수 a,b가 홀수이고 n이 짝수라는 것을 이용하면
b를 찾을 때 b는 n-1부터 찾고, 후보들은 -2씩 찾으면 된다.   

~~~java
for(int b =n-1; b >2; b-=2)
{
	int a =n-b;
	...	
}
~~~

위와같이 하면 조금 더 빠르게 찾을 수 있다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main
{
	static final int NUM =1000000;
	static boolean[] isPrime;
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int n;
		eratosthenes();
		
		while(true)
		{
			n =Integer.parseInt(br.readLine());
			if(n ==0)
				break;
			for(int b =n-1; b >2; b-=2)
			{
				int a =n-b;
				if(isPrime[a] && isPrime[b])
				{
					bw.write(n +" = " + a +" + " +b +"\n");
					break;
				}
			}
		}
		bw.flush();
	}
	static void eratosthenes()
	{
		isPrime =new boolean[NUM+1];
		Arrays.fill(isPrime, true);
		isPrime[0] =isPrime[1] =false;
		int sqrtLen =(int) Math.sqrt(NUM);
		
		for(int i =2; i <=sqrtLen; i++)
			if(isPrime[i])
				for(int j =i*i; j <=NUM; j +=i)
					isPrime[j] =false;
	}
}
~~~

