---
layout: post
title:  "[Baekjoon] 7569번: 토마토"
date:   2020-04-07
categories: PROBLEM_SOLVING
permalink: /archivers/boj7569
tags: [bfs]
---

## 문제

이전에 풀었던 토마토랑 비슷한 문제다.   
7576번 토마토 링크 : <https://www.acmicpc.net/problem/7569>

다만 거기에 높이까지 추가된 것이다.   

문제의 입력으로 가로, 세로, 높이의 크기 M, N,H가 주어지고
H번 N x M크기의 배열이 주어진다.   

모든 토마토가 익기까지 최소 며칠이 걸리는지 찾는 문제다.   

모두 익지 못하는 상황이면 -1을 출력한다.   

문제 링크 : <https://www.acmicpc.net/problem/7569>   

## 풀이

7576번 토마토는 2차원 배열로 해결할 수 있었다.   

평소에 배열을 이용할 때 3차원 배열을 잘 쓰지 않아서 처음 이 문제를 보고
어떤것을 이용해서 풀어야 되나 생각을 많이했다.   

하지만 그냥 단순히 3차원 배열을 이용하면 된다.  

그 외에는 7576번에서 풀었던 토마토 풀이랑 거의 똑같다.   

7576번 토마토 풀이: <https://jh9875.github.io/archivers/boj7576> 

문제에 필요한 자료구조들은 다음과 같이 있다.   

~~~java
static class Pos
{
	int y, x, z, cnt;
	Pos(int y, int x, int z, int cnt)
	{
		this.y =y;
		this.x =x;
		this.z =z;
		this.cnt =cnt;
	}
}
static int M, N, H;
static int[][][] boxes;
static int[] dirY = {1, 0, -1, 0, 0, 0};
static int[] dirX = {0, 1, 0, -1, 0, 0};
static int[] dirZ = {0, 0, 0, 0, 1, -1};
static ArrayList<Pos> list =new ArrayList<>();
~~~

그 전에 문제에서 높이라는 개념만 추가한 것이다.   

3차원 배열을 이용했고, 인접한 토마토를 탐색할 땐 상하좌우에서 위 아래를 추가해 줬다.   

bfs탐색 부분이나 범위를 확인하는 부분도 이와 같이 조금씩 수정해주면 된다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Pos
	{
		int y, x, z, cnt;
		Pos(int y, int x, int z, int cnt)
		{
			this.y =y;
			this.x =x;
			this.z =z;
			this.cnt =cnt;
		}
	}
	static int M, N, H;
	static int[][][] boxes;
	static int[] dirY = {1, 0, -1, 0, 0, 0};
	static int[] dirX = {0, 1, 0, -1, 0, 0};
	static int[] dirZ = {0, 0, 0, 0, 1, -1};
	static ArrayList<Pos> list =new ArrayList<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans;
		
		st =new StringTokenizer(br.readLine());
		M =Integer.parseInt(st.nextToken());
		N =Integer.parseInt(st.nextToken());
		H =Integer.parseInt(st.nextToken());
		boxes =new int[N][M][H];
		for(int k =0; k <H; k++)
		{
			for(int i =0; i <N; i++)
			{
				st =new StringTokenizer(br.readLine());
				for(int j =0; j <M; j++)
				{
					int n =Integer.parseInt(st.nextToken());
					if(n ==1)
						list.add(new Pos(i, j, k, 0));
					boxes[i][j][k] =n;
				}
			}
		}
		ans =bfs();
		bw.write(ans +"\n");
		bw.flush();
	}
	static int bfs()
	{
		int ret =0;
		int size =list.size();
		boolean[][][] visited =new boolean[N][M][H];
		Queue<Pos> queue =new LinkedList<>();
		for(int i =0; i <size; i++)
			queue.add(list.get(i));
		while(!queue.isEmpty())
		{
			int y =queue.peek().y;
			int x =queue.peek().x;
			int z =queue.peek().z;
			int cnt =queue.peek().cnt;
			queue.poll();
			if(ret <cnt)
				ret =cnt;
			for(int d =0; d <6; d++)
			{
				int nextY =y +dirY[d];
				int nextX =x +dirX[d];
				int nextZ =z +dirZ[d];
				if(!inRange(nextY, nextX, nextZ) || visited[nextY][nextX][nextZ]) continue;
				if(boxes[nextY][nextX][nextZ] ==0)
				{
					visited[nextY][nextX][nextZ] =true;
					queue.add(new Pos(nextY, nextX, nextZ, cnt+1));
				}
			}
		}
		if(!checkTomato(visited)) ret =-1;
		return ret;
	}
	static boolean inRange(int y, int x, int z)
	{
		if(y <0 || y >=N || x <0 || x >=M || z <0 || z >=H)
			return false;
		return true;
	}
	static boolean checkTomato(boolean[][][] visited)
	{
		for(int i =0; i <N; i++)
			for(int j =0; j <M; j++)
				for(int k =0; k <H; k++)
					if(!visited[i][j][k] && boxes[i][j][k] ==0)
						return false;
		return true;
	}
}
~~~



