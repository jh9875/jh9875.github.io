---
layout: post
title:  "[Baejoon] 7576번: 토마토"
date:   2020-04-07
categories: PROBLEM_SOLVING
permalink: /archivers/boj7576
tags: [bfs]
---

## 문제

문제의 입력으로 상자의 가로, 세로길이 M, N이 주어지고, M x N크기의 배열이 주어진다.   

배열의 입력으로는 -1, 0, 1이 있으며 각각이 의미하는 바는 다음과 같다.   

- 1: 익은 토마토를 의미
- 0: 안익은 토마토를 의미
- -1: 토마토가 들어있지 않은 칸

익은 토마토의 옆에 안익은 토마토가 있을 때 하루가 지나면 토마토가 익는다.   

이때 모든 토마토가 익는 최소 일수를 구해야 한다.   

만약 모든 토마토가 익지 않는다면 -1을 반환해야 한다.   

문제 링크 : <https://www.acmicpc.net/problem/7576>   

## 풀이

나는 이 문제를 bfs로 풀었다.   

하루가 지날때 마다 익은토마토 옆에 있는 안익은 토마토가 익게되니 이를 구현하기에
bfs가 적당하다고 생각했다.   

일단 처음 문제를 입력받을 때 익은 토마토들의 위치를 저장해뒀다.   

익은 토마토 주위에 있는 덜익은 토마토들이 퍼져나가야 하니까 ArrayList에 좌표를 저장해 뒀다.   

~~~java
for(int i =0; i <N; i++)
{
	st =new StringTokenizer(br.readLine());
	for(int j =0; j <M; j++)
	{
		int n =Integer.parseInt(st.nextToken());
		if(n ==1)
			list.add(new Pos(i, j, 0));
		box[i][j] =n;
	}
}
~~~

그 다음으로는 bfs를 시작한다.   

bfs를 할때 처음으로 한 일은 익은 토마토들의 위치를 queue에 모두 넣어준다.   

그 다음은 익은 토마토들 주위로 안익은 토마토가 있으면 방문한 위치를 표시해주고 queue에 넣는방식으로 퍼져나가게 했다.   

코드는 다음과 같이 했다.   

~~~java
static int bfs()
{
	int ret =0;
	int size =list.size();
	Queue<Pos> queue =new LinkedList<>();
	boolean[][] visited =new boolean[N][M];
	for(int i =0; i <size; i++)
		queue.add(list.get(i));
	while(!queue.isEmpty())
	{
		int y =queue.peek().y;
		int x =queue.peek().x;
		int cnt =queue.peek().cnt;
		queue.poll();
		if(ret <cnt)
			ret =cnt;
		for(int d =0; d <4; d++)
		{
			int nextY =y +dirY[d];
			int nextX =x +dirX[d];
			
			if(!inRange(nextY, nextX) || visited[nextY][nextX]) continue;
			if(box[nextY][nextX] ==0)
			{
				queue.add(new Pos(nextY, nextX, cnt+1));
				visited[nextY][nextX] =true;
			}
		}
	}
	if(!checkTomato(visited)) ret =-1;
	return ret;
}
~~~

탐색을 마치고 덜익은 토마토가 있으면 반환값을 -1로 하게 했다.   

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class Main
{
	static class Pos
	{
		int y, x, cnt;
		Pos(int y, int x, int cnt)
		{
			this.y =y;
			this.x =x;
			this.cnt =cnt;
		}
	}
	static int M, N;
	static int[][] box;
	static int[] dirY = {1, 0, -1, 0};
	static int[] dirX = {0, 1, 0, -1};
	static ArrayList<Pos> list =new ArrayList<>();
	
	public static void main(String[] args) throws Exception
	{
		BufferedReader br =new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw =new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;
		int ans;
		
		st =new StringTokenizer(br.readLine());
		M =Integer.parseInt(st.nextToken());
		N =Integer.parseInt(st.nextToken());
		box =new int[N][M];
		for(int i =0; i <N; i++)
		{
			st =new StringTokenizer(br.readLine());
			for(int j =0; j <M; j++)
			{
				int n =Integer.parseInt(st.nextToken());
				if(n ==1)
					list.add(new Pos(i, j, 0));
				box[i][j] =n;
			}
		}
		ans =bfs();
		bw.write(ans +"\n");
		bw.flush();
	}
	static int bfs()
	{
		int ret =0;
		int size =list.size();
		Queue<Pos> queue =new LinkedList<>();
		boolean[][] visited =new boolean[N][M];
		for(int i =0; i <size; i++)
			queue.add(list.get(i));
		while(!queue.isEmpty())
		{
			int y =queue.peek().y;
			int x =queue.peek().x;
			int cnt =queue.peek().cnt;
			queue.poll();
			if(ret <cnt)
				ret =cnt;
			for(int d =0; d <4; d++)
			{
				int nextY =y +dirY[d];
				int nextX =x +dirX[d];
				
				if(!inRange(nextY, nextX) || visited[nextY][nextX]) continue;
				if(box[nextY][nextX] ==0)
				{
					queue.add(new Pos(nextY, nextX, cnt+1));
					visited[nextY][nextX] =true;
				}
			}
		}
		if(!checkTomato(visited)) ret =-1;
		return ret;
	}
	static boolean inRange(int y, int x)
	{
		if(y <0 || y >=N || x <0 || x >=M)
			return false;
		return true;
	}
	static boolean checkTomato(boolean[][] visited)
	{
		for(int i =0; i <N; i++)
			for(int j =0; j <M; j++)
				if(!visited[i][j] && box[i][j] ==0)
					return false;
		return true;
	}
}
~~~


