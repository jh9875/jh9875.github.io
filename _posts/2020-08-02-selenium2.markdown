---
layout: post
title:  "셀레니움 연습해보기2"
date:   2020-08-02
categories: PLAY
permalink: /archivers/selenium2
tags: [python, selenium, BeautifulSoup]
---

## selenium과 BeautifulSoup

이번 포스팅에서는 selenium을 이용한 크롤링을 해보도록 하겠습니다.   

지난 포스팅에서 BeautifulSoup를 이용해서 크롤링 하는 예제를 간단하게 해봤습니다.   

하지만 BeautifulSoup를 이용해서 크롤링을 할 땐 어느정도 한계가 있습니다.   

바로 정적인 웹은 크롤링 할 순 있지만 동적인 웹을 크롤링하지 못한다는 것입니다.   

정적 웹은 사용자가 웹에 서비스를 요청시 미리 저장된 파일을 보내는 웹 페이지 입니다.   

예를 들면 사용자가 웹에서 로그인을 해야될 때도 동적 웹을 이용합니다.   

비밀번호와 패스워드를 입력 후 로그인을 하려면 사용자는 웹 서버에 로그인 요청을 하면   

웹 서버는 웹 애플리케이션 서버에 요청을 하고 로그인을 하면 이용할 수 있는 기능들을 웹 페이지에서 이용할 수 있겠지요.   

이런식으로 동적 웹은 사용자가 웹에 서비스를 요청시 데이터들을 가공 처리 후 제작된 파일을 보내는 웹 페이지 입니다.   

BeautifulSoup를 이용해서 크롤링을 연습하다 보면 안되는 부분이 많습니다.   

예를 들어 저는 메가박스에 로그인 후 제가 본 영화 리스트를 모아보는 프로그램을 구현해 볼려고 했습니다.   

그래서 ctrl+shift+i를 눌러 탐색하고자 하는 데이터들의 클래스 명을 보고 BeautifulSoup로 처리하려는데   

프로그램에서 얻은 데이터가 0개였습니다.   

왜 안될까 한참을 생각해보다가 BeautifulSoup를 이용하면 동적 웹을 크롤링 할 수 없구나를 알았습니다.   

다른 분들은 selenium을 이용해서 동적 웹을 처리한다는 것을 알았습니다.   

그렇다면 무조건 selenium을 쓰면 되는거 아니냐? 생각할 수 있습니다.   

하지만 각각 장단점이 있습니다.   

일단 BeautifulSoup를 이용해서 정적 웹을 크롤링 할 땐 웹 주소를 통해 이미 만들어진 문서를 처리하기 때문에 빠르다는 장점이 있습니다.   
    
그에 반해 동적 웹은 처리하지 못한다는 단점이 있습니다.   

selenium은 브라우저를 통해 웹에 접근하기 때문에 상대적으로 느리다는 단점과 정적 크롤링에 비해 다양한 데이터를 얻을 수 있다는 장점이 있습니다.   

## selenium 크롤링

그럼 제가 selenium을 이용했던 방법을 소개해보겠습니다.   

BeautifulSoup를 사용할 땐 select를 이용해서 태그명이나, 클래서명, id 등을 통해 데이터를 찾았던 것에 반해   

selenium은 find_element_by_class_name, find_element_by_xpath등 여러가지 기능을 제공합니다.   

일단 메가박스에 로그인을 하려면 웹에 접속하고 아이디와 비밀번호를 입력 후 로그인 버튼을 눌러야겠죠?   

다음 코드는 메가박스에 접속해서 로그인 버튼을 누르고, id, pw 입력 후 로그인 버튼을 누르는 코드입니다.   

~~~python
from selenium import webdriver
import time

id ='아이디'
pw ='비밀번호'

driver =webdriver.Chrome('C:\chromedriver_win32/chromedriver')
driver.implicitly_wait(3)
driver.get('https://www.megabox.co.kr/')

#login
driver.find_element_by_xpath('//*[@id="header"]/div[2]/div[2]/div[1]/a[1]').click() #로그인
driver.find_element_by_xpath('//*[@id="ibxLoginId"]').send_keys(id)                 #id입력
driver.find_element_by_xpath('//*[@id="ibxLoginPwd"]').send_keys(pw)                #pw입력
driver.find_element_by_xpath('//*[@id="btnLogin"]').click()                         #로그인버튼 클릭

time.sleep(5)
# driver.implicitly_wait(20)
~~~

일단 처음에 selenium을 이용하려면 webdriver설정을 해줘야됩니다.   

이용하려는 브라우저의 웹 드라이버가 있는 위치를 불러와야합니다.   

저는 chrome을 이용하기 때문에 크롬 드라이버를 이용했습니다.   

그런다음 get명령어를 통해 메가박스 홈페이지에 접속했습니다.   

그리고 로그인을 할때 보면 find_element_by_xpath를 이용하는 것을 볼 수 있습니다.   

이것은 페이지의 요소를 xpath라는 것으로 찾을 때 사용합니다.   

이것을 이용하면 웹 페이지 요소에 접근하기 아주 쉽습니다.   

사용 방법은 간단합니다.   

여기서는 메가박스 홈페이지에서 로그인 버튼을 누르는 것이기에 로그인 버튼을 예로 들겠습니다.   

![2020_08_02_1](../images/200802/2020_08_02_1.PNG)   

원하는 요소에 마우스 우클릭을 하고 마지막에 '검사'를 누른다.   

![2020_08_02_2](../images/200802/2020_08_02_2.PNG)   

그러면 다음과 같이 옆에 우클릭한 요소가 파란색으로 뜹니다.   

![2020_08_02_3](../images/200802/2020_08_02_3.PNG)   

거기서 다음과같이 마우스 우클릭 -> Copy -> Copy XPath를 누르면 우클릭한 요소의 xpath값이 복사됩니다.   

![2020_08_02_4](../images/200802/2020_08_02_4.PNG)   

그럼 이제 코드로 돌아오면 find_element_by_xpath('') 괄호 안에 넣어주면 끝입니다.   

다시 위 코드를 보면 아래와 같습니다.   

~~~python
#login
driver.find_element_by_xpath('//*[@id="header"]/div[2]/div[2]/div[1]/a[1]').click() #로그인
driver.find_element_by_xpath('//*[@id="ibxLoginId"]').send_keys(id)                 #id입력
driver.find_element_by_xpath('//*[@id="ibxLoginPwd"]').send_keys(pw)                #pw입력
driver.find_element_by_xpath('//*[@id="btnLogin"]').click()                         #로그인버튼 클릭

time.sleep(5)
# driver.implicitly_wait(5)
~~~

코드에 자세히 보면 find_element_by_xpath() 뒤에 click()이나 send_keys() 메서드를 이용합니다.   

여기서 click()은 해당 요소를 클릭하는 명령어이고,    

send_keys()는 id와 pw를 입력하는 텍스트필드에 id와 pw값을 입력하게 했습니다.   

그리고 그 밑줄에는 아이디와 비밀번호를 입력했으니 로그인 버튼을 눌러야겠죠?   

그리고 그 밑에보면 time.sleep(5)를 해줬습니다.   

저것을 한 이유는 로그인 하는 과정을 다 끝내지 않고 다른 동작을 한다면 프로그램이 오류가 발생하기 때문입니다.   

실제로 제가 해본 결과 로그인 후 마이페이지에 들어가는데 페이지가 로딩되지 않아서 오류가 발생하고 프로그램이   

멈추는 경우가 꽤 있었습니다.   

그래서 driver.implicitly_wait()을 해봤더니 소용이 없길래 time라이브러리의 sleep을 이용해줬더니    

잘 되더군요.. 아무튼 이건 프로그램을 돌리는 환경에 따라서 달라 질 수 있는것 같습니다.   

제가 지금 하는 곳에선 네트워크 상태가 좋지 않아서 로그인 후 5초 정도 기다려주는 코드를 넣어주었습니다.   

로그인일 했으니 그 다음 코드를 보겠습니다.   

~~~python
#myPage
driver.find_element_by_xpath('//*[@id="header"]/div[3]/a[4]').click()               #나의 메가박스
driver.find_element_by_xpath('//*[@id="layer_mymega"]/div[1]/div[1]/div[2]/div[3]/a').click()   #나의 메가박스 들어가기
driver.find_element_by_xpath('//*[@id="myStory"]/div[2]/a[1]/em').click()           #본 영화

arr =driver.find_elements_by_class_name('tit')
print(type(arr))
print(len(arr))
print(arr)
for e in arr:
    if e.text !='':
        print(e.text)
~~~

그 다음페이지도 크게 다를건 없습니다.   

1~3번째 코드는 xpath값을 이용해서 마이페이지로 이동하고, 내가 본 영화 페이지로 이동하는 코드입니다.   

그 다음에 오는 코드는 find_elements_by_class_name를 이용하는 코드입니다.   

이것은 class이름을 이용해서 데이터를 찾는 코드인데요, find_element_by_class_name이랑 주의해서 사용해야됩니다.   

element는 웹에서 1개 요소만 찾는것이고, elements는 여러개의 요소를 찾는 것입니다.   

아무튼 그런다음 그 아래 코드대로 출력해보면 다음과 같은 결과가 나옵니다.   

![2020_08_02_5](../images/200802/2020_08_02_5.PNG)   

find_elements_by_class_name의 결과 값은 파이썬의 list형태로 값이 반환되는 걸 확인할 수 있습니다.   

그리고 list의 크기가 23개나 나오는데 이는 웹에서 클래스 이름이 tit인 요소가 영화 제목 말고도 더 있어서 그런것 같습니다.   

확인해보니 그냥 빈칸이었습니다.   

아무튼 빈칸을 제외하고 출력하더라도 나의 메가박스, 나의 무비스토리가 출력되었군요..   

아무튼 이런방식으로 적절한 클래스이름이나 태그명을 찾아서 데이터를 처리해주면 됩니다.   

~~~python
from selenium import webdriver
import time

id =''
pw ='비밀번호'

driver =webdriver.Chrome('C:\chromedriver_win32/chromedriver')
driver.implicitly_wait(3)
driver.get('https://www.megabox.co.kr/')

#login
driver.find_element_by_xpath('//*[@id="header"]/div[2]/div[2]/div[1]/a[1]').click() #로그인
driver.find_element_by_xpath('//*[@id="ibxLoginId"]').send_keys(id)                 #id입력
driver.find_element_by_xpath('//*[@id="ibxLoginPwd"]').send_keys(pw)                #pw입력
driver.find_element_by_xpath('//*[@id="btnLogin"]').click()                         #로그인버튼 클릭

time.sleep(5)
# driver.implicitly_wait(5)

#myPage
driver.find_element_by_xpath('//*[@id="header"]/div[3]/a[4]').click()               #나의 메가박스
driver.find_element_by_xpath('//*[@id="layer_mymega"]/div[1]/div[1]/div[2]/div[3]/a').click()   #나의 메가박스 들어가기
driver.find_element_by_xpath('//*[@id="myStory"]/div[2]/a[1]/em').click()           #본 영화

arr =driver.find_elements_by_class_name('tit')
print(type(arr))
print(len(arr))
print(arr)
for e in arr:
    if e.text !='':
        print(e.text)
~~~