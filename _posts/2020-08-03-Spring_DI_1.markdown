---
layout: post
title:  "[Spring] DI(Dependency Injection) (1)"
date:   2020-08-03
categories: SPRING
permalink: /archivers/Spring_DI_1
tags: [spring, java, DI]
---

## DI와 의존성

이번 포스팅에서는 DI(Dependency Injection)에 대해서 알아보겠습니다.   

(이번 포스팅은 최범균님의 "초보 웹 개발자를 위한 스프링5 프로그래밍 입문" 및 인터넷 자료를 활용했습니다.)   

**DI** 란 우리말로 의존 주입(의존성 주입)이라고 하고 *객체 사이에 의존성을 자신이 아닌 외부에서 주입해 주는 것* 을 의미합니다.   

위에서 객체 의존성이란 단어가 나오는데 DI를 알아보기 전에 **객체 의존성** 이란 개념부터 먼저 알아보겠습니다.   

객체 의존성은 객체의 변경에 의해 다른 객체가 영향을 받으면 객체 사이에 의존한다고 합니다.   

예를 들어 한 클래스에서 다른 클래스를 이용할 때 의존성이 있다고 합니다.   

다음과 같은 예를 들어보겠습니다.   

~~~java
//첫번째 방법
public class Tool {
	private String tool;
	
	public void use() {
		System.out.println(tool + "을(를) 사용했습니다.");
	}	
}

public class Person {
	private Tool tool =new Tool();

	public void useTool() {
		tool.use();
	}
}

public class Alien {
	private Tool tool =new Tool();
	
	public void playTool() {
		tool.use();
	}
}
~~~   

위에서 Person클래스와 Alien클래스에서 tool 객체를 클래스 내부에서 *직접* 생성해서 사용하고 있습니다.   

이렇게 직접 의존하는 사이가 되면 단점이 있습니다.   

만약 Tool클래스를 변경한다고 하면 Person 클래스와 Alien클래스도 수정해 줘야 한다는 것입니다.   

위 예제에선 코드가 짧아서 크게 문제가 되지 않지만 코드의 양이 많아지면 코드를 수정할 때 수정해야 하는 부분이 
상당히 많아져서 일의 능률이 상당히 떨어지게 됩니다.   

즉, 유지보수 관점에서 문제가 일어납니다.   

하지만 위 코드를 좀 더 개선할 방법이 있습니다.   

객체를 직접 생성하는 것이 아닌 *객체를 전달받는 방식* 을 사용하는 것입니다.   

위 코드를 다음과 같이 바꿔보겠습니다.   

~~~java
//두번째 방법
public class Tool {
	private String tool;
	
	public void use() {
		System.out.println(tool + "을(를) 사용했습니다.");
	}
}

public class Person {
	private Tool tool;
	
	Person(Tool tool) {
		this.tool =tool
	}

	public void useTool() {
		tool.use();
	}
}

public class Alien {
	private Tool tool;
	
	Alien(Tool tool) {
		this.tool =tool;
	}
	
	public void playTool() {
		tool.use();
	}
}
~~~   

두번째 코드는 첫번째 코드와 거의 비슷하지만 약간 다른 부분이 있습니다.   

바로 생성자를 통해 tool객체를 받는 것입니다.   

첫번째 방법과 두번째 방법은 어떤 차이가 있는것인지 예를 들어 알아보겠습니다.   

만약 위 코드에서 Tool클래스의 새로운 버전이 나와서 코드를 바꾸고 싶다고 해보겠습니다.   

~~~java
public class newVersionTool extends Tool{
	...
}
~~~

새로운 클래스가 생기고 Person클래스와 Alien클래스가 newVersionTool을 사용하고 싶다고 가정해 보겠습니다.   

- 첫번째 방법을 사용할 때   

첫번째 방법처럼 클래스 내부에서 직접 사용한다면 아래와 같이 Person클래스와 Alien를 바꿔야합니다.   

~~~java
public class Person {
	private Tool tool =new newVersionTool();		//new Tool();  --> new newVersionTool();
	...
}

public class Alien {
	println Tool tool =new newVersionTool();		//new Tool();  --> new newVersionTool();
	...
}
~~~

- 두번째 방법을 사용할 때   

두번째 방법을 사용한다고 하면 클래스를 수정할 부분은 없습니다.   

다만 Person과 Alien클래스를 사용하는 부분을 수정해야 겠네요.   

~~~java
Tool t =new Tool();			//	--> Tool t =new newVersionTool();
Person p =new Person(t);
Alien a =new Alien(t);
~~~

객체를 사용하는 부분을 위와같이 변경해 주면 됩니다.   

두번째 방법을 사용할 때의 장점은 변경할 코드가 한곳으로 집중되어서 코드의 수정이 더욱 나아진다는 장점이 있습니다.   

그렇게 때문에 의존성을 주입시킬 필요가 있습니다.   
   

## DI하는 방법

이제 Person과 Alien을 사용해보겠습니다.   

~~~java
public static void main(String[] args) {
	Tool t =new Tool();
	Person p =new Person(t);
	Alien a =new Alien(t);
	...
}
~~~ 

위 코드처럼 Person과 Alien을 생성해서 의존을 주입시켜줄 수 있지만 따로 클래스를 만들어서 하는 방법이 좋을 것 같습니다.   

~~~java
public class Assembler {
	Tool t =new Tool();
	Person p =new Person(t);
	Alien a =new Alien(t);
	
	public Person getPerson() {
		return p;
	}
	public Alien getAlien() {
		return a;
	}
}

public static void main(String[] args) {
	private Assembler assembler =new Assembler();
	
	...
}
~~~ 

위와같이 의존하는 객체들 끼리 묶어서 Assembler클래스에 넣어주고 사용할 땐 Assembler getter 메서드를 이용해서 객체를 사용할 수 있습니다.   

즉 Assembler클래스는 의존 객체를 주입하는 기능을 제공하는 겁니다.   

위와 같은 방법을 이용하면 클래스를 수정해야 되는 일이 있을 땐 Assembler클래스를 수정하면 되니 유지보수 하기가 좋아집니다.   
<br/>
<br/>   

지금까지 의존성을 주입하는 방법을 설명했습니다.   

사실 저렇게 조립기를 구현할 필요는 없습니다.   

스프링은 많은 기능을 지원하지만 그 중 DI 기능도 지원합니다.   

다음 포스팅에서는 스프링을 이용하여 의존 주입하는 방법을 설명해보겠습니다.   

다음 포스팅: <https://jh9875.github.io/archivers/Spring_DI_2>
   