---
layout: post
title:  "[Spring] DI(Dependency Injection) (2)"
date:   2020-08-08
categories: SPRING
permalink: /archivers/Spring_DI_2
tags: [spring, java, DI]
---

## 머릿말

지난 포스팅에서는 DI의 개념에대해서 알아보았습니다.   
(이전 포스팅: <https://jh9875.github.io/archivers/Spring_DI_1>)   

이번에는 스프링에서 DI를 하는 방법에 대해 알아보겠습니다.   

(이번 포스팅에서 사용하는 코드는 최범균님의 "초보 웹 개발자를 위한 스프링5 프로그래밍 입문" 코드를 활용했습니다.)   
<br/>

## 스프링의 DI 사용

이전 포스팅에선 의존하는 객체간에 의존을 주입시켜주는 Assembler클래스를 직접 만들어 사용해봤습니다.   

스프링에서는 그와 비슷하게 객체를 생성하고, 생성한 객체에 의존을 주입하는 기능을 제공합니다.   

다음 코드를 보겠습니다.   

~~~java
package config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import spring.ChangePasswordService;
import spring.MemberDao;
import spring.MemberRegisterService;

@Configuration
public class AppCtx {

	@Bean
	public MemberDao memberDao() {
		return new MemberDao();
	}
	
	@Bean
	public MemberRegisterService memberRegSvc() {
		return new MemberRegisterService(memberDao());
	}
	
	@Bean
	public ChangePasswordService changePwdSvc() {
		ChangePasswordService pwdSvc = new ChangePasswordService();
		pwdSvc.setMemberDao(memberDao());
		return pwdSvc;
	}
	
}
~~~
<br/>

위 코드는 앞선 포스팅에서 작성했던 Assembler와 비슷한 역할을 합니다.   

코드의 중간에 "@Configuration"과 "@Bean"이라는 것이 들어있습니다.   

이처럼 자바에서 키워드 앞에 "@"가 붙은것을 어노테이션이라 합니다.   

자바에서 *어노테이션* 이란 일종의 메타데이터입니다.   

주석과 비슷한 역할을 하는데 어노테이션은 인터페이스를 기반으로 한 문법입니다.   

클래스에 의미를 부여할 때 사용합니다.   

예를들어 "@Overrider" 어노테이션은 자바를 조금이라도 사용해 보셨다면 아실겁니다.   

Overrider는 클래스를 상속할 때 사용하는 어노테이션인데 이것은 상속 받는 클래스에서 메서드를 다시 정의하겠다는 의미입니다.   

이처럼 애노테이션은 클래스나 메서드에 의미를 부여할 때 사용합니다.   
<br/>


여기서 쓰인 Configuration 어노테이션은 스프링 설정 클래스를 의미합니다.   

Configuration 어노테이션을 사용함으로써 해당 클래스가 스프링의 환경 설정과 관련된 파일임을 알려주는 것입니다.      
<br/>


Bean 어노테이션은 해당 메서드가 생성한 객체를 스프링 빈이라 설정한다는 의미입니다.   

스프링 빈이란 스프링 컨테이너에서 관리하는 객체입니다.   

쉽게 말해서 스프링 컨테이너에서 관리하는 자바 객체라고 생각하시면 되겠습니다.   

(스프링 컨테이너에 대해선 추후에 포스팅에서 알아보도록 하겠습니다.)   

스프링에서 객체를 관리해 주는데, Bean 어노테이션이 붙은 메서드가 반환하는 객체를 관리해 준다고 생각하시면 되겠습니다.   
<br/>

이전 포스팅에서 Assembler클래스를 만들고 Assembler에 포함되어 있는 클래스들을 사용하기 위해서 다음과 같이 Assembler객체를 생성하고   

assembler 메서드에서 이용하려는 객체를 반환해서 사용했습니다.   

~~~java
...

public static void main(String[] args) throws IOException {
	...
	
	private static Assembler assembler = new Assembler();
	
	...
	
	MemberRegisterService regSvc = assembler.getMemberRegisterService();
}
~~~ 
<br/>


assembler 객체를 이용해서 의존하는 클래스들을 이용하곤 했죠.   

스프링에서선 다음과 같이 사용합니다.   

~~~java
...

public static void main(String[] args) throws IOException {
	...
	
	private static ApplicationContext ctx =new AnnotaionConfigApplicationContext(AppCtx.class);
	
	...
	
	MemberRegisterService regSvc =ctx.getBean("memberRegSvc", MemberRegisterService.class);
}
~~~
<br/>


위 코드에서 ApplicationContext는 객체를 관리하기 위한 인터페이스입니다.   

AnnotaionConfigApplicationContext는 자바 어노테이션을 이용하여 클래스로부터 객체 설정 정보를 가져오는 일을 합니다.   

위 코드에선 AppCtx.class의 설정 정보를 가져오는 겁니다. 위 AppCtx 클래스에서 Configuration 어노테이션으로 스프링 클래스를 설정했었습니다.   

ApplicationContext는 AnnotaionConfigApplicationContext의 상위 인터페이스이기 때문에 위와같이 선언할 수 있습니다.   

ApplicationContext는 빈 객체의 생성, 초기화, 보관, 제거 등을 관리하기 때문에 스프링 컨테이너라고도 합니다.   

위 코드에서 ctx는 이름이 ctx인 스프링 컨테이너 입니다.   

그 밑에 코드를 보시면 ctx.getBean()을 이옹해서 빈 객체를 불러올 수 있습니다.   

getBean 메서드의 괄호안에는 2개의 인자가 들어가는데 각각이 의미하는 것은 다음과 같습니다.   

> ctx.getBean(빈의 이름, 빈의 타입);   

즉 위에서는 스프링 컨테이너(ctx)로부터 빈의 이름이 memberRegSvc인 빈 객체를 얻은 것입니다.(빈의 이름은 따로 지정해 주지 않는 이상 Bean 어노테이션이 붙은 메서드의 이름입니다.)   

앞선 AppCtx클래스에서 Bean 어노테이션을 이용해서 다음과 같이 빈 메서드를 설정했습니다.   

~~~java
...

@Bean
public MemberRegisterService memberRegSvc() {
	return new MemberRegisterService(memberDao());
}

~~~ 
<br/>

Bean 어노테이션이 붙으니 메서드가 반환하는 객체를 관리하겠다는 뜻이죠.   

그럼 MemberRegisterService 객체를 스프링 컨테이너에서 관리하기 때문에   

> MemberRegisterService regSvc =ctx.getBean("memberRegSvc", MemberRegisterService.class);   

이렇게 객체를 얻어올 수 있습니다.   
<br/>

이렇게 스프링 컨테이너를 이용해서 의존주입 하는 방법을 알아보았습니다.   
<br/>

## DI 방식

의존 주입하는 방식에는 2가지 방식이 있습니다.   

1. 생성자 방식   
2. 세터 메서드 방식   

~~~java
package config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import spring.ChangePasswordService;
import spring.MemberDao;
import spring.MemberRegisterService;

@Configuration
public class AppCtx {

	@Bean
	public MemberDao memberDao() {
		return new MemberDao();
	}
	
	@Bean
	public MemberRegisterService memberRegSvc() {
		return new MemberRegisterService(memberDao());
	}
	
	@Bean
	public ChangePasswordService changePwdSvc() {
		ChangePasswordService pwdSvc = new ChangePasswordService();
		pwdSvc.setMemberDao(memberDao());
		return pwdSvc;
	}
	
}
~~~
<br/>

위에서 봤던 AppCtx 클래스입니다.   

AppCtx 클래스에선 의존 주입을 생성자 방식과 세터 메서드 이용 방식 둘다 사용하고 있습니다.   

일단 첫번째로 생성자 이용 방식은 MemberRegisterService에서 사용하고 있습니다.   

MemberRegisterService를 반환할 때 MemberRegisterService의 인자로 memberDao를 사용하고 있죠?    

저렇게 MemberRegisterService 생성자 안에 memberDao를 넣어줌으로써 생성자 방식으로 의존 객체를 주입하고 있습니다.   
<br/>

두번째로 세터 메서드 이용 방식은 ChangePasswordService에서 이용하고 있습니다.   

메서드 안을 보면 ChangePasswordService 객체를 생성하고, setMemberDao 메서드를 통해 memberDao를 주입하고 있습니다.   
<br/>
   
## 정리

이번 포스팅에서는 스프링에서 제공하는 DI를 알아보았습니다.   

의존을 주입하는 클래스(AppCtx.java)를 만들고 그 위에 "Configuration" 어노테이션을 붙어셔 스프링 설정 클래스라고 알리고 사용했습니다.   

그리고 스프링 컨테이너에서 관리하려는 객체를 반환하는 메서드 위에 "Bean" 어노테이션을 붙여서 사용했습니다.   

다음 포스팅에서는 의존 자동 주입에 대해 알아보겠습니다.   
<br/>
