---
layout: post
title:  "[Spring] AOP (1)"
date:   2020-08-12
categories: SPRING
permalink: /archivers/Spring_AOP_1
tags: [spring, java, AOP]
---

## 머릿말

이번 포스팅에서는 AOP가 필요한 이유에 대해서 알아보겠습니다.

(이번 포스팅에서 사용하는 코드는 최범균님의 "초보 웹 개발자를 위한 스프링5 프로그래밍 입문" 코드를 활용했습니다.)   
<br/>
<br/>

## AOP 란?

**AOP** 란 Aspect Orienterd Programming의 약자입니다.

보통 '관점 지향 프로그래밍'이라 번역을 많이 합니다.

위에서 언급한 책의 저자는 관점보다는 기능 또는 관심이라는 표현이 더 알맞다고 합니다.

<br/>

AOP는 프로그래밍을 할 때 핵심 기능과 공통 기능을 나누고 핵심 기능에 공통 기능을 삽입하는 방식으로 프로그래밍 하는 것입니다.

말로만 들었을 땐 어떤 방법인지 이해하기 힙듭니다.

예제를 통해 간단히 알아보겠습니다.

<br/>
<br/>

## 핵심 기능과 공통 기능

예를 들어서 factorial을 계산하고 걸린 시간을 계산하는 프로그램을 만들고 싶다고 해보겠습니다.

factorial이란 1x2x.. xn을나타내는 것이기 때문에 몇가지 형태로 나타낼 수 있습니다.

~~~java
public interface Calculator {
    public long factorial(long num);
}
~~~

<br/>

위와 같은 인터페이스가 있고 그것을 구현한 클래스가 아래와 같이 있다고 합시다.

~~~java
public class ImpeCalculator implements Calculator {
    @Override
    public long factorial(long num) {
        long result =1;
        for(long i =1; i <=num; i++)
            result *=i;
        return result;
    }
}

public class RecCalculator implements Calculator {
    @Override
    public long factorial(long num) {
        if (num ==0)
            return 1;
        else
        return num * factorial(num-1);
    }
}
~~~

<br/>

위와 같은 두가지 방법으로 factorial을 구현할 수 있습니다.

<br/>

다음은 시간을 측정하는 코드를 보겠습니다.

~~~java
public class ExeTimeCalculator implements Calculator {

	private Calculator delegate;

	public ExeTimeCalculator(Calculator delegate) {
        this.delegate = delegate;
    }

	@Override
	public long factorial(long num) {
		long start = System.nanoTime();
		long result = delegate.factorial(num);
		long end = System.nanoTime();
		System.out.printf("%s.factorial(%d) 실행 시간 = %d\n",
				delegate.getClass().getSimpleName(),
				num, (end - start));
		return result;
	}

}
~~~

<br/>

위와 같이 코드를 짜면 됩니다.

Override한 함수를 보면 시작 시간과 끝 시간 사이에 factorial 함수를 실행시키고 있습니다.

delegate는 Calculator 인터페이스 타입이므로 ImpeCalculator클래스와 RecCalculator클래스를 할당할 수 있습니다.

<br/>

코드를 분석해 보겠습니다.

위에 있는 3개의 클래스 ImpeCalculator, RecCalculator, ExeTimeCalculator 모두 Calculator 인터페이스를 상속받았습니다.

각각 하는 역할을 다음과 같습니다.

- ImpeCalculator: factorial을 for문을 이용해서 구현했습니다.

- RecCalculator:  factorial을 재귀함수를 이용해서 구현했습니다.

- ExeTimeCalculator: Calculator를 상속받은 클래스의 factorial 함수의 측정시간을 구합니다.

<br/>

이때 각각 클래스를 핵심 기능과 공통 기능으로 구분해 보겠습니다.

- 핵심 기능: factorial을 구한다 -> ImpeCalculator, RecCalculator
- 공통 기능: factorial의 시간을 측정한다. -> ExeTimeCalculator

이렇게 핵심 기능과 공통 기능으로 나눌 수 있습니다.

<br/>

그렇다면 이렇게 함으로써 얻는 장점은 무엇일까요?

공통 기능을 클래스로 구현해서 핵심 기능의 클래스에 공통 기능 코드를 넣지 않아도 되서 코드의 중복이 줄어듭니다.

그리고 공통 기능의 코드를 수정하고 싶을 때는 따로 클래스에 구현했기 때문에 수정하기 쉽습니다.

<br/>

그리고 이쯤에서 *프록시(proxy)* 라는 용어를 알아 보겠습니다.

프록시란 뜻은 우리말로 대리 행위 또는 대리인 등 대리~ 가 들어가는 것을 의미합니다.

자바에서 프록시란 핵심 기능은 다른 객체가 실행하고, 부가적인 기능을 실행하는 객체를 프록시라고 합니다.

위 코드에선 ExeTimeCalculator 클래스가 그런 역할을 하는 셈입니다.


<br/>
<br/>

## 정리

지금까지 AOP에 대해서 알아보았습니다.

AOP란 핵심 기능과 공통 기능을 구분해서 구현하는 프로그래밍 방법입니다.

AOP를 함으로써 코드의 중복을 줄여주고 재사용성을 높여줄 수 있습니다.

다음 포스팅에선 스프링에서 제공하는 AOP에 대해서 알아보겠습니다.

<br/>
<br/>
