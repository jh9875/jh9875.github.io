---
layout: post
title:  "[Baekjoon] 11048번: 이동하기"
date:   2020-08-26
categories: PROBLEM_SOLVING
permalink: /archivers/boj11048
tags: [dp]
---

## 문제

N X M 크기의 미로가 있고 각 방에는 사탕이 있습니다.

좌특 상단을 (1, 1)이고 오른쪽 하단을 (N, M)이라 할 때 (1, 1)에서 (N, M)까지 이동하면서 얻을 수 있는 사탕의 최대 개수를 구하는 문제입니다.

문제 링크 : <https://www.acmicpc.net/problem/11048>

## 풀이

저는 이러한 문제를 풀 때 항상 비슷한 패턴을 이용합니다.

가능한 모든 경우를 탐색하는 완전 탐색을 하고, 중복으로 계산되는 부분이 있으면 메모이제이션을 합니다.

이 문제 또한 그렇게 해결할 수 있습니다.

<br/>

제가 작성한 코드는 다음과 같습니다.

~~~java
static int solve(int r, int c) {
	int ret = 0;

	if (cache[r][c] != -1)
		return cache[r][c];

	for (int d = 0; d < 3; d++) {
		int nextR = r + dirR[d];
		int nextC = c + dirC[d];
		if (!inRange(nextR, nextC))
			continue;
		ret = Math.max(ret, solve(nextR, nextC) + maze[nextR][nextC]);
	}
	return cache[r][c] = ret;
}

static boolean inRange(int r, int c) {
	if (r < 1 || r > N || c < 1 || c > M)
		return false;
	return true;
}
~~~
<br/>

solve함수에서는 3가지 방향을 탐색합니다.

그 중 값이 가장 큰 것은 ret 변수에 저장해서 반환합니다.

그리고 cache에 저장해둬서 만약 계산해둔 값이면 중복 계산을 피합니다.

<br/>

전체 코드

~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	static int N, M;
	static int[][] maze;
	static int[][] cache;
	static int[] dirR = { 1, 0, 1 };
	static int[] dirC = { 0, 1, 1 };

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;

		st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		maze = new int[N + 1][M + 1];
		cache = new int[N + 1][M + 1];
		for (int i = 1; i <= N; i++)
			Arrays.fill(cache[i], -1);
		for (int i = 1; i <= N; i++) {
			st = new StringTokenizer(br.readLine());
			for (int j = 1; j <= M; j++)
				maze[i][j] = Integer.parseInt(st.nextToken());
		}

		bw.write((solve(1, 1) + maze[1][1]) + "\n");
		bw.flush();
		br.close();
		br.close();
	}

	static int solve(int r, int c) {
		int ret = 0;

		if (cache[r][c] != -1)
			return cache[r][c];

		for (int d = 0; d < 3; d++) {
			int nextR = r + dirR[d];
			int nextC = c + dirC[d];
			if (!inRange(nextR, nextC))
				continue;
			ret = Math.max(ret, solve(nextR, nextC) + maze[nextR][nextC]);
		}
		return cache[r][c] = ret;
	}

	static boolean inRange(int r, int c) {
		if (r < 1 || r > N || c < 1 || c > M)
			return false;
		return true;
	}
}

~~~

<br/>

 