---
layout: post
title:  "[Baekjoon] 2503번: 숫자 야구"
date:   2020-09-10
categories: PROBLEM_SOLVING
permalink: /archivers/boj2503
tags: [brute_force]
---

## 문제

문제의 입력으로 질문의 수와 질문이 주어집니다.

질문은 질문숫자 3자리와 스트라이크 개수, 볼의 개수 이렇게 주어집니다.

각 질문을 모두 만족하는 숫자의 개수를 찾는 문제입니다.

문제 링크 : <https://www.acmicpc.net/problem/2503>

## 풀이

저는 문제를 다음과 같은 방식으로 접근했습니다.

- 서로 다른 3자리 수의 모든 경우를 만든다.
- 만든 3자리가 질문들을 모두 만족하는지 확인한다.
- 질문을 만족한다면 정답+1을 해준다.
<br/>

일단 모든 경우의 수를 만드는 함수부터 보겠습니다.

~~~java
static int makeCases(String numCase, boolean[] used) {
	if (numCase.length() == 3) {
		return valueCheck(numCase) ? 1 : 0;
	}
	int ret = 0;

	for (int i = 1; i < 10; i++) {
		if (!used[i]) {
			used[i] = true;
			ret += makeCases(numCase + i, used);
			used[i] = false;
		}
	}
	return ret;
}
~~~
<br/>

위 함수의 파라미터 중 numCase는 답을 확인할 3자리 숫자를 만드는 것입니다.

used란 boolean배열은 1부터 9까지 숫자를 한번씩만 사용하는 것을 확인하기 위해 만든 배열입니다.

함수에서 for문을 보시면 아직 사용하지 않은 숫자를 확인하고 새로운 숫자를 만들어 재귀함수를 호출하는 방식으로 동작합니다.

함수의 기저 사례로 3자리가 완성되었을 때 모든 질문에 만족하는 지를 확인하고 맞다면 1을 반환하는 코드가 있습니다.

<br/>

그 다음으로 만든 3자리가 모든 질문에 만족하는지 확인하는 함수를 보겠습니다.

~~~java
static boolean valueCheck(String numCase) {
	for (int i = 0; i < N; i++) {
		String num = questions[i].num;
		int strike = questions[i].strike;
		int ball = questions[i].ball;
		int s = 0, b = 0;

		for (int j = 0; j < 3; j++)
			if (num.charAt(j) == numCase.charAt(j))
				s++;
		for (int j = 0; j < 3; j++)
			if (numCase.contains(String.valueOf(num.charAt(j))))
				b++;
		b -= s;

		if (strike != s || ball != b)
			return false;
	}
	return true;
}
~~~
<br/>

저는 단순하게 생각해서 strike는 각 자리수가 똑같으면 수를 세고, ball은 두 수를 비교해서 같은 숫자의 개수에서 strike의 수를 뺀 숫자(중복을 빼야 하므로)로 정했습니다.**

이렇게 모든 조건을 만족하면 true를 반환하고, 아니면 중간에 false를 반환하도록 했습니다.

<br/>
<br/>

전체 코드
~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

public class Main {

	static class Baseball {
		String num;
		int strike;
		int ball;

		Baseball(String num, int strike, int ball) {
			this.num = num;
			this.strike = strike;
			this.ball = ball;
		}
	}

	static int N;
	static Baseball[] questions;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		StringTokenizer st;

		N = Integer.parseInt(br.readLine());
		questions = new Baseball[N];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine());
			String num = st.nextToken();
			int strike = Integer.parseInt(st.nextToken());
			int ball = Integer.parseInt(st.nextToken());
			questions[i] = new Baseball(num, strike, ball);
		}
		bw.write(makeCases("", new boolean[10]) + "\n");
		bw.flush();
		bw.close();
		br.close();
	}

	static int makeCases(String numCase, boolean[] used) {
		if (numCase.length() == 3) {
			return valueCheck(numCase) ? 1 : 0;
		}
		int ret = 0;

		for (int i = 1; i < 10; i++) {
			if (!used[i]) {
				used[i] = true;
				ret += makeCases(numCase + i, used);
				used[i] = false;
			}
		}
		return ret;
	}

	static boolean valueCheck(String numCase) {
		for (int i = 0; i < N; i++) {
			String num = questions[i].num;
			int strike = questions[i].strike;
			int ball = questions[i].ball;
			int s = 0, b = 0;

			for (int j = 0; j < 3; j++)
				if (num.charAt(j) == numCase.charAt(j))
					s++;
			for (int j = 0; j < 3; j++)
				if (numCase.contains(String.valueOf(num.charAt(j))))
					b++;
			b -= s;

			if (strike != s || ball != b)
				return false;
		}
		return true;
	}
}

~~~
<br/>
<br/>
