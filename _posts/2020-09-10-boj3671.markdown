---
layout: post
title:  "[Baekjoon] 3671번: 산업 스파이의 편지"
date:   2020-09-10
categories: PROBLEM_SOLVING
permalink: /archivers/boj3671
tags: [math]
---

## 문제

문제에서 테스트 케이스의 수와 각각의 테스트 케이스가 주어집니다.

각각의 테스트 케이스는 최대 7자리 정수가 주어집니다. 각각의 수를 조합하여 만들 수 있는 소수의 개수를 찾는 문제입니다.

모든 수를 사용하지 않아도 됩니다.

문제 링크 : <https://www.acmicpc.net/problem/3671>

## 풀이

처음 문제를 보고 든 생각은 숫자의 조합을 생각해보고, 각 숫자가 소수가 맞는지 확인하는 방법을 생각했습니다.

중복된 수가 나올 수 있기 때문에 자바의 HashSet을 이용하면 되겠다고 생각했습니다.

숫자의 조합을 만들어 내는 함수는 다음과 같이 만들어 봤습니다.

~~~java
static void solve(int num, int[] pieces) {
	if (isPrime(num))
		hs.add(num);
	for (int i = 0; i < 10; i++) {
		if (pieces[i] != 0) {
			pieces[i]--;
			solve(num * 10 + i, pieces);
			pieces[i]++;
		}
	}
}
~~~
<br/>

일단 함수의 파라미터를 보겠습니다.

num이 의미하는 것은 숫자의 조합으로 만든 숫자입니다.

pieces는 0부터 9까지 수가 각 몇 번 등장하였는지 확인하기 위해 사용했습니다.

일단 가장 처음에 소수인지 확인하고 소수이면 HashSet에 넣습니다.

그리고 for문을 통해 순서의 조합을 만들고 있습니다.

<br/>

소수를 판별하는 코드는 처음엔 아래와 같이 작성했습니다.

~~~java
static void erastothenes() {
	isPrime = new boolean[MAX + 1];
	Arrays.fill(isPrime, true);
	isPrime[0] = false;
	isPrime[1] = false;

	int sqrtn = (int) Math.sqrt(MAX);

	for (int i = 2; i <= sqrtn; i++) {
		if (isPrime[i]) {
			for (int j = i * i; j <= MAX; j += i)
				isPrime[j] = false;
		}
	}
}
~~~

<br/>

isPrime이란 boolean 배열을 만들어서 사용했습니다.

배열의 크기는 최대 7자리 들어갈 수 있으므로 10000000으로 MAX값을 설정했습니다.

이런 방식으로 한 이유는 여러개의 테스트케이스가 있기 때문에 전역변수로 isPrime이란 boolean 배열을 만들고 활용하면 시간을 절약할 수 있을거라 생각했습니다.

<br/>

그리고 문제를 제출했더니 통과는 했지만 엄청나게 많은 메모리와 시간이 들었습니다.

메모리와 시간은 다음과 같이 나왔습니다.

![2020_09_10_1](../images/200910/2020_09_10_1.PNG)
<br/>

다른 사람들이 제출한 java 코드를 보면 시간이 400ms에서 700ms 정도인걸 보면 상당한 시간이 들었다는 것을 알 수 있습니다.

그래서 어떤점이 문제인지 확인하기 위해 다른사람들의 코드를 봤습니다.

처음엔 solve함수에 문제가 있는 줄 알고 계속 해맸습니다.

나중에 알고보니 erastothenes 함수에서 많은 시간과 메모리가 든것이었습니다.

다른 사람이 작성한 소수 판별 함수는 다음과 같습니다.

~~~java
static boolean isPrime(int num) {
	if (num == 0 || num == 1)
		return false;
	for (int i = 2; i * i <= num; i++) {
		if (num % i == 0)
			return false;
	}
	return true;
}
~~~
<br/>

소수를 판별하기 위해 함수에 인자로 보내고 판별하는 방식입니다.

이 함수를 쓰니 결과는 다음과 같이 나왔습니다.

![2020_09_10_2](../images/200910/2020_09_10_2.PNG)
<br/>

시간과 메모리가 엄청나게 많이 줄었습니다.

<br/>

제가 처음 했던 생각은 각 테스트 케이스와 숫자의 조합을 만들 때마다 소수인지 확인해야 하므로 미리 만들어 두면 좋을 것이라 생각했습니다.

그러나 모든 테스트 케이스와 경우마다 소수를 확인해 주는 방법이 훨씬 효율적 이었습니다.

확실하진 않지만 제 생각엔 테스트 케이스의 수가 많지 않아서 그런것이 아닌가 생각이 듭니다.

문제에선 최대 200개인데 훨씬 많은 수의 테스트 케이스가 있다면 미리 만들어 두는 방법이 좋을 수 있지 않을까 생각이 듭니다.

<br/>
<br/>

전체 코드

~~~~java
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.HashSet;

public class Main {
	static final int MAX = 99999999;
	static HashSet<Integer> hs;

	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		int c;
		String input;

		c = Integer.parseInt(br.readLine());
		while (c-- > 0) {
			input = br.readLine();
			int len = input.length();

			int[] pieces = new int[10];
			hs = new HashSet<>();
			for (int i = 0; i < len; i++)
				pieces[input.charAt(i) - '0']++;
			solve(0, pieces);
			bw.write(hs.size() + "\n");
		}
		bw.flush();
		bw.close();
		br.close();
	}

	static void solve(int num, int[] pieces) {
		if (isPrime(num))
			hs.add(num);
		for (int i = 0; i < 10; i++) {
			if (pieces[i] != 0) {
				pieces[i]--;
				solve(num * 10 + i, pieces);
				pieces[i]++;
			}
		}
	}

	static boolean isPrime(int num) {
		if (num == 0 || num == 1)
			return false;

		for (int i = 2; i * i <= num; i++) {
			if (num % i == 0)
				return false;
		}
		return true;
	}
}

~~~

<br/>
<br/>